{"version":3,"sources":["../src/server/index.ts","../src/server/controller.ts","../src/server/middleware.ts","../src/server/validation.ts","../src/common/index.ts","../src/common/typebox.ts","../src/common/model.ts","../src/common/procedure.ts","../src/common/utils.ts","../src/common/errors.ts","../src/index.ts","../src/common/search.ts","../src/common/resource.ts","../src/server/service.ts","../src/server/combined-service.ts","../src/server/serverless.ts","../src/server/types.ts"],"sourcesContent":["export { Controller } from \"./controller\";\nexport * from \"./service\";\nexport * from \"./combined-service\";\nexport { serverless } from \"./serverless\";\nexport * from \"./types\";\nexport * from \"./middleware\";\n","import Router from \"@koa/router\";\nimport { DefaultState, Middleware, Next } from \"koa\";\n\nimport { compose } from \"./middleware\";\nimport { Service } from \"./service\";\nimport { OperationDefinition, OperationContext, Operation } from \"./types\";\nimport { validate } from \"./validation\";\nimport { T, TSchema, trueFalseStringsToBoolean } from \"../common\";\n\ninterface ControllerOptions {\n  prefix?: string;\n  tags?: string[];\n  auth?: boolean;\n  internal?: boolean;\n  group?: string;\n  middleware?: Middleware<DefaultState, OperationContext>[];\n}\n\ntype AnyObject = Record<string, unknown>;\ntype AnyObjectOrArray = object | object[];\n\ntype RouteHandler<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TReq extends TSchema,\n  TRes extends TSchema,\n  TExtend,\n> = (\n  ctx: OperationContext<\n    OperationDefinition<TParams, TQuery, TReq, TRes>,\n    TExtend\n  >,\n  next: Next\n) => Promise<void>;\n\nfunction serializer(\n  obj: object | object[] | null | undefined\n): AnyObjectOrArray | string | undefined {\n  if (obj === null) {\n    return undefined;\n  }\n\n  if (obj instanceof Date) {\n    return obj.toISOString();\n  }\n\n  if (typeof obj !== \"object\" || obj === undefined) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return (obj as unknown[]).map((item) =>\n      serializer(item as AnyObjectOrArray)\n    );\n  }\n\n  return Object.keys(obj as AnyObject).reduce((acc: AnyObject, key: string) => {\n    acc[key] = serializer((obj as AnyObject)[key] as AnyObjectOrArray);\n    return acc;\n  }, {} as AnyObject);\n}\n\nexport class Controller<TExtend = Record<string, unknown>> {\n  service!: Service<TExtend>;\n  prefix: string;\n  tags: string[];\n  auth: boolean;\n  group?: string;\n  internal: boolean;\n  preMatchedRouteMiddleware: Middleware<DefaultState, OperationContext>[];\n  router: Router<DefaultState, unknown>;\n  operations: [\n    OperationDefinition<TSchema, TSchema, TSchema, TSchema>,\n    (\n      ctx: OperationContext<\n        OperationDefinition<TSchema, TSchema, TSchema, TSchema>,\n        TExtend\n      >,\n      next: Next\n    ) => Promise<void>,\n  ][];\n\n  constructor({\n    prefix = \"\",\n    middleware = [],\n    tags = [],\n    group,\n    auth = false,\n    internal = false,\n  }: ControllerOptions = {}) {\n    this.router = new Router<DefaultState, unknown>();\n    this.preMatchedRouteMiddleware = middleware;\n    this.tags = tags;\n    this.group = group;\n    this.auth = auth;\n    this.internal = internal;\n    this.prefix = prefix;\n    this.operations = [];\n  }\n\n  routes() {\n    return this.router.routes();\n  }\n\n  allowedMethods() {\n    return this.router.allowedMethods();\n  }\n\n  getOperations() {\n    return this.operations;\n  }\n\n  private createOperation<\n    TParams extends TSchema,\n    TQuery extends TSchema,\n    TReq extends TSchema,\n    TRes extends TSchema,\n  >(base: Operation<TParams, TQuery, TReq, TRes>) {\n    return {\n      ...base,\n      auth: !!base.auth,\n      summary: base.name,\n      description: base.description ?? \"No Description\",\n      params: base.params ?? T.Object({}),\n      query: base.query ?? T.Object({}),\n      req: base.req ?? T.Unknown(),\n      res: base.res ?? T.Unknown(),\n      middleware: base.middleware ?? [],\n      tags: this.tags,\n    };\n  }\n\n  private processResponseBody = async (\n    ctx: OperationContext<\n      OperationDefinition<TSchema, TSchema, TSchema, TSchema>,\n      TExtend\n    >,\n    next: Next\n  ) => {\n    await next();\n    if (typeof ctx.body === \"object\") {\n      ctx.body = serializer(ctx.body);\n    }\n  };\n\n  register<T extends OperationDefinition<TSchema, TSchema, TSchema, TSchema>>(\n    definition: T,\n    path: string,\n    methods: string[],\n    routeMiddleware: Middleware<DefaultState, OperationContext<T, TExtend>>[],\n    options?: Router.LayerOptions\n  ): Router.Layer {\n    const passedMiddleware = Array.isArray(routeMiddleware)\n      ? routeMiddleware\n      : [routeMiddleware];\n    const finalMiddleware = (\n      path.toString().startsWith(\"(\")\n        ? routeMiddleware\n        : [\n            ...passedMiddleware.slice(0, passedMiddleware.length - 1),\n            validate(definition),\n            this.processResponseBody,\n            ...this.preMatchedRouteMiddleware,\n            ...passedMiddleware.slice(passedMiddleware.length - 1),\n          ]\n    ) as Middleware<DefaultState, OperationContext<T, TExtend>>[];\n\n    return this.router.register(\n      path,\n      methods,\n      finalMiddleware as Middleware<DefaultState, unknown>[],\n      options\n    );\n  }\n\n  bind(router: Router<DefaultState, unknown> = this.router) {\n    this.operations.forEach(([operation, handler]) => {\n      const routeHandler = async (\n        ctx: OperationContext<\n          OperationDefinition<TSchema, TSchema, TSchema, TSchema>,\n          TExtend\n        >,\n        next: Next\n      ) =>\n        handler(\n          Object.assign(ctx, { query: trueFalseStringsToBoolean(ctx.query) }),\n          next\n        );\n      this.register(\n        operation,\n        operation.path,\n        [operation.method],\n        [...operation.middleware, routeHandler]\n      );\n    });\n    if (![\"\", \"/\"].includes(this.prefix)) {\n      router.use(this.prefix, this.routes());\n      router.use(this.prefix, this.allowedMethods());\n    } else {\n      router.use(this.routes());\n      router.use(this.allowedMethods());\n    }\n  }\n\n  addOperation<\n    TParams extends TSchema,\n    TQuery extends TSchema,\n    TReq extends TSchema,\n    TRes extends TSchema,\n  >(\n    definition: Operation<TParams, TQuery, TReq, TRes>,\n    ...handlers: RouteHandler<TParams, TQuery, TReq, TRes, TExtend>[]\n  ) {\n    const operation = this.createOperation(definition);\n    this.operations.push([\n      operation,\n      compose<\n        OperationContext<\n          OperationDefinition<TParams, TQuery, TReq, TRes>,\n          TExtend\n        >\n      >(handlers),\n    ]);\n  }\n}\n","import { DefaultState, Middleware, Next } from \"koa\";\n\nimport { OperationContext } from \"./types\";\n\nexport function compose<TContext extends OperationContext>(\n  middleware: Middleware<DefaultState, TContext>[]\n) {\n  return async (context: TContext, next: Next) => {\n    let index = -1;\n    const dispatch = async (i: number): Promise<void> => {\n      if (i <= index) {\n        return Promise.reject(new Error(\"next() called multiple times\"));\n      }\n      index = i;\n      let fn = middleware[i];\n      if (i === middleware.length) {\n        fn = next;\n      }\n      if (!fn) {\n        return Promise.resolve();\n      }\n      try {\n        return await fn(context, dispatch.bind(null, i + 1));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    };\n    return dispatch(0);\n  };\n}\n","import { TSchema, TypeGuard } from \"@sinclair/typebox\";\nimport { ValueError } from \"@sinclair/typebox/compiler\";\nimport { Value } from \"@sinclair/typebox/value\";\nimport { DefaultState, Middleware, Next } from \"koa\";\n\nimport { BadRequestError, TypeSystem, noAdditionalProperties } from \"../common\";\nimport { OperationContext, OperationDefinition } from \"./types\";\n\ntype FormatValidator = (value: string) => boolean;\n\nconst formats: Record<string, FormatValidator> = {\n  palindrome: (v) => /^[a-zA-Z0-9]*$/.test(v),\n  email: (v) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(v),\n  uuid: (v) => /^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i.test(v),\n  hexcolor: (v) => /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(v),\n  \"date-time\": (v) => !isNaN(Date.parse(v)),\n};\n\nObject.entries(formats).forEach(([name, validatorFn]) => {\n  try {\n    TypeSystem.Format(name, (value) => validatorFn(value));\n  } catch (err) {\n    // NOOP\n  }\n});\n\nfunction parseValueErrors(errors: ValueError[]): Record<string, string> {\n  return errors.reduce(\n    (acc, { path, message }) => ({\n      ...acc,\n      [(path.startsWith(\"/\") ? path.slice(1, path.length) : path).replace(\n        \"/\",\n        \".\"\n      )]: message,\n    }),\n    {} as Record<string, string>\n  );\n}\n\nexport function validate<\n  RouteContext extends OperationDefinition<TSchema, TSchema, TSchema, TSchema>,\n  TExtend = Record<string, unknown>,\n>(\n  context: Partial<RouteContext>\n): Middleware<DefaultState, OperationContext<RouteContext, TExtend>> {\n  return async (ctx: OperationContext<RouteContext, TExtend>, next: Next) => {\n    let errors: ValueError[] = [];\n    // if (context.query) {\n    //   const striped = noAdditionalProperties(context.query, ctx.query);\n    //   ctx.query = striped;\n    //   errors = [\n    //     ...errors,\n    //     ...Value.Errors(context.query, trueFalseStringsToBoolean(striped)),\n    //   ];\n    // }\n    if (context.params) {\n      errors = [...errors, ...Value.Errors(context.params, ctx.params)];\n    }\n\n    if (\n      context.req &&\n      !TypeGuard.IsUnknown(context.req) &&\n      typeof ctx.request.body !== \"undefined\"\n    ) {\n      const striped = noAdditionalProperties(context.req, ctx.request.body);\n      ctx.request.body = striped;\n      const schema = context.req;\n      errors = [...errors, ...Value.Errors(schema, ctx.request.body)];\n    }\n\n    if (errors.length > 0) {\n      throw new BadRequestError(\"Invalid Request\", parseValueErrors(errors));\n    }\n\n    await next();\n\n    if (\n      context.res &&\n      !TypeGuard.IsUnknown(context.res) &&\n      ctx.status < 300 &&\n      typeof ctx.body !== \"undefined\"\n    ) {\n      const striped = noAdditionalProperties(context.res, ctx.body);\n      ctx.body = striped;\n      const schema = context.res;\n      errors = [...errors, ...Value.Errors(schema, ctx.body)];\n    }\n\n    if (errors.length > 0) {\n      throw new BadRequestError(\"Invalid Response\", parseValueErrors(errors));\n    }\n  };\n}\n","export * from \"./typebox\";\nexport * from \"./model\";\nexport * from \"./procedure\";\nexport * from \"./utils\";\nexport * from \"./types\";\nexport * from \"./errors\";\nexport * from \"./search\";\nexport * from \"./resource\";\n","export * from \"@sinclair/typebox\";\nexport { Type as T, TypeGuard } from \"@sinclair/typebox\";\nexport { Value } from \"@sinclair/typebox/value\";\nexport { TypeCompiler } from \"@sinclair/typebox/compiler\";\nexport { TypeSystem } from \"@sinclair/typebox/system\";\n","import { Static, T, TObject, TSchema } from \"../common\";\n\nexport type ModelOptions<\n  TModel extends TSchema,\n  TCreate extends TSchema,\n  TUpdate extends TSchema,\n  TDelete extends TSchema,\n  TQuery extends TSchema,\n  TPath extends TSchema,\n  TTransform extends (serialized: Static<TModel>) => any,\n  TSortable extends TSchema,\n> = {\n  name: string;\n  resource: string;\n  idKey: Exclude<keyof Static<TModel>, symbol>;\n  model: TModel;\n  create?: TCreate;\n  update?: TUpdate;\n  del?: TDelete;\n  query?: TQuery;\n  path?: TPath;\n  transformer: TTransform;\n  sortableBy?: TSortable;\n  _unstable_offlineModel?: boolean;\n  infiniteSearch?: {\n    enabled: boolean;\n    defaultLimit?: number;\n  };\n};\n\nexport class Model<\n  TModel extends TSchema,\n  TCreate extends TSchema = TModel,\n  TUpdate extends TSchema = TModel,\n  TDelete extends TSchema = TObject,\n  TQuery extends TSchema = TObject,\n  TPath extends TSchema = TObject,\n  TTransform extends (serialized: Static<TModel>) => any = (\n    m: Static<TModel>\n  ) => typeof m,\n  TSortable extends TSchema = TModel,\n> {\n  name: string;\n  resource: string;\n  idKey: Exclude<keyof Static<TModel>, symbol>;\n  schemas: {\n    model: TModel;\n    create: TCreate;\n    update: TUpdate;\n    del: TDelete;\n    query: TQuery;\n    path: TPath;\n  };\n  transformer: TTransform;\n  sortableBy: TSortable;\n  _unstable_offlineModel?: boolean;\n  infiniteSearch?: {\n    enabled: boolean;\n    defaultLimit: number;\n  };\n\n  constructor(\n    options: ModelOptions<\n      TModel,\n      TCreate,\n      TUpdate,\n      TDelete,\n      TQuery,\n      TPath,\n      TTransform,\n      TSortable\n    >\n  ) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.idKey = options.idKey;\n    this.schemas = {\n      model: options.model,\n      create: options.create ?? (options.model as unknown as TCreate),\n      update: options.update ?? (options.model as unknown as TUpdate),\n      del: options.del ?? (T.Object({}) as unknown as TDelete),\n      path: options.path ?? (T.Object({}) as unknown as TPath),\n      query: options.query ?? (T.Object({}) as unknown as TQuery),\n    };\n    this.transformer = options.transformer;\n    this.sortableBy =\n      options.sortableBy || (options.model as unknown as TSortable);\n    this._unstable_offlineModel = options._unstable_offlineModel ?? false;\n    this.infiniteSearch = options.infiniteSearch\n      ? {\n          enabled: options.infiniteSearch.enabled,\n          defaultLimit: options.infiniteSearch.defaultLimit ?? 50,\n        }\n      : undefined;\n  }\n\n  getSearchResponseType(): TSchema {\n    return T.Object({\n      results: T.Array(this.schemas.model),\n      nextCursor: T.Optional(T.String()),\n      total: T.Number(),\n      metadata: T.Object({\n        currentResults: T.Number(),\n        historicalResults: T.Number(),\n        timePeriodCovered: T.Tuple([T.String(), T.String()]),\n      }),\n    });\n  }\n\n  getSearchParamsType(): TSchema {\n    return T.Object({\n      cursor: T.Optional(T.String()),\n      limit: T.Optional(T.Number()),\n      search: T.Optional(T.String()),\n      filters: T.Optional(\n        T.Array(\n          T.Object({\n            field: T.String(),\n            operator: T.Union([\n              T.Literal(\"eq\"),\n              T.Literal(\"contains\"),\n              T.Literal(\"gt\"),\n              T.Literal(\"lt\"),\n              T.Literal(\"between\"),\n            ]),\n            value: T.Union([\n              T.String(),\n              T.Number(),\n              T.Boolean(),\n              T.Array(T.Union([T.String(), T.Number()])),\n            ]),\n          })\n        )\n      ),\n      sort: T.Optional(\n        T.Object({\n          field: T.String(),\n          direction: T.Union([T.Literal(\"asc\"), T.Literal(\"desc\")]),\n        })\n      ),\n    });\n  }\n}\n\nexport function createModel<\n  TModel extends TSchema,\n  TCreate extends TSchema,\n  TUpdate extends TSchema,\n  TDelete extends TSchema,\n  TQuery extends TSchema,\n  TPath extends TSchema,\n  TTransformer extends (serialized: Static<TModel>) => any,\n  TSortable extends TSchema = TModel,\n>(\n  options: ModelOptions<\n    TModel,\n    TCreate,\n    TUpdate,\n    TDelete,\n    TQuery,\n    TPath,\n    TTransformer,\n    TSortable\n  >\n) {\n  return new Model<\n    TModel,\n    TCreate,\n    TUpdate,\n    TDelete,\n    TQuery,\n    TPath,\n    TTransformer,\n    TSortable\n  >(options);\n}\n","import { T, TSchema } from \"../common\";\n\nexport interface ProcedureOptions<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  name: string;\n  resource: string;\n  params: TParams;\n  result: TResult;\n  query?: TQuery;\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n}\n\nexport class Procedure<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  name: string;\n  resource: string;\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" = \"GET\";\n  params: TParams;\n  query: TQuery;\n  result: TResult;\n\n  constructor(options: ProcedureOptions<TParams, TQuery, TResult>) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.params = options.params;\n    this.result = options.result;\n    this.query = options.query ?? (T.Object({}) as unknown as TQuery);\n    this.method = options.method || \"GET\";\n  }\n}\n\nexport function createProcedure<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n>(options: ProcedureOptions<TParams, TQuery, TResult>) {\n  return new Procedure(options);\n}\n","import { Value, Type, Static, TSchema, TypeGuard, TObject } from \"./typebox\";\nimport { GetFieldType } from \"./types\";\n\nexport function convertQueryParamKeysToKabobCase<T extends object>(obj: T) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, val]) => [key.replace(/0/g, \".\"), val])\n  );\n}\n\nexport function convertQueryParamKeysFromKabobCase<T extends object>(obj: T) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, val]) => [key.replace(/,/g, \"-\"), val])\n  );\n}\n\nexport function getValue<\n  TData,\n  TPath extends string,\n  TDefault = GetFieldType<TData, TPath>,\n>(\n  data: TData,\n  path: TPath,\n  defaultValue?: TDefault\n): GetFieldType<TData, TPath> | TDefault {\n  const value = path\n    .split(/[.[\\]]/)\n    .filter(Boolean)\n    .reduce<GetFieldType<TData, TPath>>(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (value, key) => (value as any)?.[key],\n      data as any\n    );\n\n  return value !== undefined ? value : (defaultValue as TDefault);\n}\n\nexport function Nullable<T extends TSchema>(schema: T) {\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true });\n}\n\nexport function noAdditionalPropertiesInSchema<T extends TSchema>(\n  schema: T\n): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: noAdditionalPropertiesInSchema(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      additionalProperties: false,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          noAdditionalPropertiesInSchema(value),\n        ])\n      ),\n    };\n  }\n  return schema;\n}\n\nexport function withDefaultsForStringFormats<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withDefaultsForStringFormats(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withDefaultsForStringFormats(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsString(schema) && typeof schema.format !== \"undefined\") {\n    return {\n      ...schema,\n      default: \"\",\n    };\n  }\n  return schema;\n}\n\nexport function withNoStringFormats<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withNoStringFormats(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withNoStringFormats(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsString(schema) && typeof schema.format !== \"undefined\") {\n    return {\n      ...schema,\n      format: undefined,\n    };\n  }\n  return schema;\n}\n\nexport function withNoEnumValues<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withNoEnumValues(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties)\n          .filter(([, value]) => {\n            return !TypeGuard.IsUnion(value);\n          })\n          .map(([key, value]) => [key, withNoEnumValues(value)])\n      ),\n    };\n  }\n  return schema;\n}\n\nexport function withDatesAsDateTimeStrings<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withDatesAsDateTimeStrings(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withDatesAsDateTimeStrings(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsDate(schema)) {\n    return {\n      ...schema,\n      type: \"string\",\n      format: \"date-time\",\n    };\n  }\n  return schema;\n}\n\nexport function noEmptyStringValues<T extends object>(obj: T): Partial<T> {\n  return Object.entries(obj).reduce((acc, [key, val]) => {\n    if (val !== \"\") {\n      return { ...acc, [key]: val };\n    }\n    return acc;\n  }, {} as Partial<T>);\n}\n\nexport function noAdditionalProperties<T, I>(schema: T, input: I): I {\n  if (TypeGuard.IsArray(schema) && Array.isArray(input)) {\n    return input.map(\n      (item) => noAdditionalProperties(schema.items, item) as unknown as T\n    ) as I;\n  }\n  if (\n    TypeGuard.IsObject(schema) &&\n    typeof input === \"object\" &&\n    input !== null\n  ) {\n    const prunedInput: Partial<I> = {};\n    for (const [key, value] of Object.entries(input)) {\n      if (key in schema.properties) {\n        prunedInput[key as keyof I] = noAdditionalProperties(\n          schema.properties[key],\n          value\n        );\n      }\n    }\n    return prunedInput as I;\n  }\n  return input;\n}\n\nexport function shallowSchemaProperties<T extends TObject>(schema: T) {\n  return {\n    ...schema,\n    properties: Object.fromEntries(\n      Object.entries(schema.properties).filter(\n        ([, prop]) => !TypeGuard.IsArray(prop) && !TypeGuard.IsObject(prop)\n      )\n    ),\n  };\n}\n\nexport function undefinedToNull<T extends object>(input: T) {\n  return Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [\n      key,\n      value === undefined ? null : value,\n    ])\n  );\n}\n\nexport function trueFalseStringsToBoolean<T extends object>(input: T) {\n  return Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [\n      key,\n      value === \"true\" ? true : value === \"false\" ? false : value,\n    ])\n  );\n}\n\nexport function cast<T extends TSchema>(schema: T, value: unknown) {\n  return Value.Cast(schema, value);\n}\n","import { CustomError } from \"ts-custom-error\";\n\nexport enum ErrorType {\n  // 400\n  BadRequest = \"BadRequest\",\n  // 401\n  Unauthorized = \"Unauthorized\",\n  // 403\n  Forbidden = \"Forbidden\",\n  // 404\n  NotFound = \"NotFound\",\n  // 500\n  InternalServerError = \"InternalServerError\",\n}\n\nexport class APIError extends CustomError {\n  type: ErrorType;\n  status: number;\n  errors: Record<string, unknown>;\n  constructor(\n    status: number,\n    message: string,\n    errors: Record<string, string> = {}\n  ) {\n    super(message);\n    this.type = ErrorType.InternalServerError;\n    this.status = status;\n    this.errors = errors;\n  }\n}\n\nexport function isAPIError(error: unknown): error is APIError {\n  return (\n    !!error &&\n    typeof error === \"object\" &&\n    \"status\" in error &&\n    typeof error.status === \"number\"\n  );\n}\n\nexport class BadRequestError extends APIError {\n  fields: Record<string, string>;\n  constructor(message?: string, fieldErrors?: Record<string, string>) {\n    super(400, message || \"Bad Request\");\n    this.type = ErrorType.BadRequest;\n    this.fields = fieldErrors || {};\n  }\n}\n\nexport function isBadRequestError(error: APIError): error is BadRequestError {\n  return error.type === ErrorType.BadRequest && error.status === 400;\n}\n\nexport class UnauthorizedError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(401, message || \"Unauthorized\", errors);\n    this.type = ErrorType.Unauthorized;\n  }\n}\n\nexport function isUnauthorizedError(\n  error: APIError\n): error is UnauthorizedError {\n  return error.type === ErrorType.Unauthorized && error.status === 401;\n}\n\nexport class ForbiddenError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(403, message || \"Forbidden\", errors);\n    this.type = ErrorType.Forbidden;\n  }\n}\n\nexport function isForbiddenError(error: APIError): error is ForbiddenError {\n  return error.type === ErrorType.Forbidden && error.status === 403;\n}\n\nexport class NotFoundError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(404, message || \"Not Found\", errors);\n    this.type = ErrorType.NotFound;\n  }\n}\n\nexport function isNotFoundError(error: APIError): error is NotFoundError {\n  return error.type === ErrorType.NotFound && error.status === 404;\n}\n\nexport class InternalServerError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(500, message || \"Internal Server Error\", errors);\n    this.type = ErrorType.InternalServerError;\n  }\n}\n\nexport function isInternalServerError(\n  error: APIError\n): error is InternalServerError {\n  return error.type === ErrorType.InternalServerError && error.status === 500;\n}\n\nexport const assert = (\n  condition: any,\n  message: string,\n  error = BadRequestError\n) => {\n  if (!condition) {\n    throw new error(message);\n  }\n};\n","export * from \"./common\";\n","import { T } from \"../\";\n\nexport interface SearchMetadata {\n  currentResults: number;\n  historicalResults: number;\n  timePeriodCovered: [string, string];\n}\n\nexport const SearchMetadataSchema = T.Object({\n  currentResults: T.Number(),\n  historicalResults: T.Number(),\n  timePeriodCovered: T.Tuple([T.String(), T.String()]),\n});\n\nexport interface SearchResponse<T> {\n  results: T[];\n  nextCursor?: string;\n  total: number;\n  metadata: SearchMetadata;\n}\n\nexport const SearchResponseSchema = T.Object({\n  results: T.Array(T.Any()),\n  nextCursor: T.Optional(T.String()),\n  total: T.Number(),\n  metadata: SearchMetadataSchema,\n});\n\nexport interface SearchFilter {\n  field: string;\n  operator: \"eq\" | \"contains\" | \"gt\" | \"lt\" | \"between\";\n  value: string | number | boolean | [string | number];\n}\n\nexport const SearchFilterSchema = T.Object({\n  field: T.String(),\n  operator: T.Union([\n    T.Literal(\"eq\"),\n    T.Literal(\"contains\"),\n    T.Literal(\"gt\"),\n    T.Literal(\"lt\"),\n    T.Literal(\"between\"),\n  ]),\n  value: T.Union([\n    T.String(),\n    T.Number(),\n    T.Boolean(),\n    T.Array(T.Union([T.String(), T.Number()])),\n  ]),\n});\n\nexport interface SearchParams {\n  cursor?: string;\n  limit: number;\n  search?: string;\n  sort?: {\n    field: string;\n    direction: \"asc\" | \"desc\";\n  };\n}\n\nexport const SearchParamsSchema = T.Object({\n  cursor: T.Optional(T.String()),\n  limit: T.Number(),\n  search: T.Optional(T.String()),\n  sort: T.Optional(\n    T.Object({\n      field: T.String(),\n      direction: T.Union([T.Literal(\"asc\"), T.Literal(\"desc\")]),\n    })\n  ),\n});\n\nexport type SearchQueryField = {\n  name: string;\n  comparator?: \"and\" | \"or\";\n  is?: string | number | boolean;\n  contains?: string;\n  isOneOf?: string[];\n  isLikeOneOf?: string[];\n  isGreaterThan?: string | number;\n  isLessThan?: string | number;\n  isBetween?: [string | number, string | number];\n  isNull?: boolean;\n};\n\nexport type OrderBy<T> = {\n  key: Exclude<keyof T, symbol>;\n  order: \"asc\" | \"desc\";\n};\n\nexport type SearchQuery<TSortable = Record<string, unknown>> = {\n  fields?: SearchQueryField[];\n  offset?: number;\n  limit?: number;\n  orderBy?: string | OrderBy<TSortable>;\n};\n\nexport type SearchQueryResult<T> = {\n  results: T[];\n  total: number;\n  offset?: number;\n  limit: number;\n};\n\nexport const encodeSearchQuery = <TSortable>(\n  fields: Required<SearchQuery<TSortable>>[\"fields\"]\n): Record<string, string> =>\n  fields.reduce(\n    (\n      acc,\n      {\n        name,\n        comparator,\n        is,\n        isNull,\n        isOneOf,\n        isLikeOneOf,\n        contains,\n        isGreaterThan,\n        isLessThan,\n        isBetween,\n      }\n    ) => {\n      if (typeof is !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:${is}` : is,\n        };\n      }\n      if (typeof isNull !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:!${isNull}` : `!${isNull}`,\n        };\n      }\n      if (typeof isOneOf !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:${isOneOf.join(\",\")}`\n            : isOneOf.join(\",\"),\n        };\n      }\n\n      if (typeof contains !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:%${contains}%` : `%${contains}%`,\n        };\n      }\n\n      if (typeof isLikeOneOf !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:${isLikeOneOf.map((v) => `%${v}%`).join(\",\")}`\n            : isLikeOneOf.map((v) => `%${v}%`).join(\",\"),\n        };\n      }\n\n      if (typeof isGreaterThan !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:>${isGreaterThan}`\n            : `>${isGreaterThan}`,\n        };\n      }\n\n      if (typeof isLessThan !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:<${isLessThan}`\n            : `<${isLessThan}`,\n        };\n      }\n\n      if (typeof isBetween !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:>${isBetween[0]},<${isBetween[1]}`\n            : `>${isBetween[0]},<${isBetween[1]}`,\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\nfunction toNumberIfPossible(value: string | number): number | string {\n  if (typeof value === \"string\") {\n    const parsed = parseInt(value, 10);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return value as number;\n}\n\nexport function decodeSearchQuery(\n  query: Record<string, string>\n): SearchQueryField[] {\n  return Object.entries(query).reduce((acc, [name, val]) => {\n    const [comparatorStr, valuesStr] = val.includes(\":\")\n      ? val.split(\":\")\n      : [\"and\", val];\n\n    const comparator = comparatorStr === \"and\" ? \"and\" : \"or\";\n    const hasMany = valuesStr.includes(\",\");\n    const values = hasMany ? valuesStr.split(\",\") : [valuesStr];\n\n    // Is Between\n    if (\n      values.length === 2 &&\n      values[0].startsWith(\">\") &&\n      values[1].startsWith(\"<\")\n    ) {\n      acc.push({\n        name,\n        comparator,\n        isBetween: [\n          toNumberIfPossible(values[0].slice(1)),\n          toNumberIfPossible(values[1].slice(1)),\n        ],\n      });\n\n      // Is Less Than\n    } else if (valuesStr.startsWith(\"<\")) {\n      const [, value] = valuesStr.split(\"<\");\n      acc.push({\n        name,\n        comparator,\n        isLessThan: toNumberIfPossible(value),\n      });\n\n      // Is Greater Than\n    } else if (valuesStr.startsWith(\">\")) {\n      const [, value] = valuesStr.split(\">\");\n      acc.push({\n        name,\n        comparator,\n        isGreaterThan: toNumberIfPossible(value),\n      });\n\n      // Is Like One Of\n    } else if (\n      values.length > 1 &&\n      valuesStr.startsWith(\"%\") &&\n      valuesStr.endsWith(\"%\")\n    ) {\n      acc.push({\n        name,\n        comparator,\n        isLikeOneOf: values.map((v) => v.slice(1, -1)),\n      });\n\n      // Contains\n    } else if (valuesStr.startsWith(\"%\") && valuesStr.endsWith(\"%\")) {\n      acc.push({\n        name,\n        comparator,\n        contains: valuesStr.slice(1, -1),\n      });\n\n      // Is One Of\n    } else if (values.length > 1) {\n      acc.push({\n        name,\n        comparator,\n        isOneOf: values,\n      });\n      // Is Null\n    } else if (values.length === 1 && valuesStr.startsWith(\"!\")) {\n      acc.push({\n        name,\n        comparator,\n        isNull: valuesStr === \"!true\",\n      });\n      // Is\n    } else {\n      acc.push({\n        name,\n        comparator,\n        is: toNumberIfPossible(valuesStr),\n      });\n    }\n\n    return acc;\n  }, [] as SearchQueryField[]);\n}\n","import { TSchema } from \"./typebox\";\n\nexport interface ResourceOptions<\n  TResp extends TSchema,\n  TParams extends TSchema,\n> {\n  name: string;\n  resource: string;\n  schema: TResp;\n  params: TParams;\n}\n\nexport class Resource<TResp extends TSchema, TParams extends TSchema> {\n  name: string;\n  resource: string;\n  schema: TResp;\n  params: TParams;\n\n  constructor(options: ResourceOptions<TResp, TParams>) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.schema = options.schema;\n    this.params = options.params;\n  }\n}\n\nexport function createResource<TResp extends TSchema, TParams extends TSchema>(\n  options: ResourceOptions<TResp, TParams>\n): Resource<TResp, TParams> {\n  return new Resource(options);\n}\n","import { Options as CorsOptions } from \"@koa/cors\";\nimport Router from \"@koa/router\";\nimport Koa, { DefaultState, Middleware } from \"koa\";\nimport BodyParser from \"koa-bodyparser\";\nimport KoaQs from \"koa-qs\";\nimport sizeOf from \"object-sizeof\";\nimport prettyBytes from \"pretty-bytes\";\n\nimport {\n  convertQueryParamKeysFromKabobCase,\n  ErrorType,\n  isAPIError,\n  isBadRequestError,\n  isForbiddenError,\n  isInternalServerError,\n  isNotFoundError,\n  isUnauthorizedError,\n} from \"../common\";\nimport { Controller } from \"./controller\";\n\nexport type Contact = {\n  name: string;\n  email: string;\n  url: string;\n};\n\nexport type License = {\n  name: string;\n  url: string;\n};\n\nexport type Server = {\n  description: string;\n  url: string;\n};\n\nexport interface ServiceOptions<TExtend = Record<string, never>> {\n  title?: string;\n  description?: string;\n  tags?: string[];\n  prefix?: string;\n  version?: string;\n  internal?: boolean;\n  license?: License;\n  contact?: Contact;\n  servers?: Server[];\n  controllers?: Controller<TExtend>[];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  middlewares?: Middleware<DefaultState, any>[];\n  config?: Partial<ServiceConfiguration>;\n  onError?: (error: Error) => void;\n}\n\nexport interface ServiceConfiguration {\n  /**\n   * Options for the CORS middleware.\n   * See Koa Cors for more information.\n   */\n  cors?: CorsOptions;\n}\n\nexport const DEFAULT_SERVICE_CONFIGURATION: ServiceConfiguration = {\n  cors: {},\n} as const;\n\nexport function isService(service: unknown): service is Service {\n  if (typeof service !== \"object\" || service === null) {\n    return false;\n  }\n  return (\n    \"title\" in service &&\n    typeof service.title === \"string\" &&\n    \"description\" in service &&\n    typeof service.description === \"string\" &&\n    \"tags\" in service &&\n    Array.isArray(service.tags) &&\n    \"prefix\" in service &&\n    typeof service.prefix === \"string\"\n  );\n}\n\nexport class Service<TExtend = Record<string, unknown>> extends Koa<\n  DefaultState,\n  unknown\n> {\n  version: string;\n  title: string;\n  description: string;\n  tags: string[];\n  prefix: string;\n  internal: boolean;\n  contact: Contact;\n  license: License;\n  servers: Server[];\n  controllers: Controller<TExtend>[];\n  children: Service<TExtend>[];\n  middleware: Middleware<DefaultState, unknown>[];\n  router: Router<DefaultState, TExtend>;\n  config: ServiceConfiguration;\n  onError?: (error: Error) => void;\n\n  constructor({\n    title = \"\",\n    description = \"\",\n    prefix = \"\",\n    version = \"\",\n    servers = [{ description: \"\", url: \"\" }],\n    contact = { name: \"\", email: \"\", url: \"\" },\n    license = { name: \"\", url: \"\" },\n    internal = false,\n    tags = [],\n    controllers = [],\n    middlewares = [],\n    config = DEFAULT_SERVICE_CONFIGURATION,\n    onError,\n  }: ServiceOptions<TExtend>) {\n    super();\n    this.router = new Router<DefaultState, TExtend>();\n    this.version = version;\n    this.children = [];\n    this.title = title;\n    this.description = description;\n    this.tags = tags;\n    this.internal = internal;\n    this.contact = contact;\n    this.license = license;\n    this.servers = servers;\n    this.prefix = prefix;\n    this.controllers = controllers;\n    this.middleware = middlewares as Middleware<DefaultState, unknown>[];\n    this.config = { ...DEFAULT_SERVICE_CONFIGURATION, ...config };\n    this.onError = onError;\n  }\n\n  register(controller: Controller<TExtend>) {\n    this.controllers.push(controller);\n  }\n\n  bind(target: Router<DefaultState, TExtend> = this.router) {\n    const serviceRouter = new Router<DefaultState, unknown>();\n\n    serviceRouter.use(BodyParser());\n\n    serviceRouter.use(async (ctx, next) => {\n      await next();\n      const resBodySize = sizeOf(ctx.body);\n\n      // If the response body size is approaching the lambda limit (6MB), log an error to the handler. (Sentry)\n      if (resBodySize > 5 * 1024 * 1024) {\n        this.onError?.(\n          new Error(\n            `Response body size (${prettyBytes(resBodySize)}) is approaching the lambda limit (6MB)`\n          )\n        );\n      }\n\n      // If response body size is greated than the lambda limit (6MB), log an error to the handler. (Sentry)\n      if (resBodySize > 6 * 1024 * 1024) {\n        this.onError?.(\n          new Error(\n            `Response body size (${prettyBytes(resBodySize)}) is greater than the lambda limit (6MB)`\n          )\n        );\n      }\n    });\n\n    serviceRouter.use(async (ctx, next) => {\n      try {\n        await next();\n      } catch (err) {\n        if (err instanceof Error) {\n          this.onError?.(err);\n          if (isAPIError(err) && isBadRequestError(err)) {\n            ctx.body = {\n              type: ErrorType.BadRequest,\n              message: err.message,\n              status: 400,\n              fields: err.fields,\n            };\n            ctx.status = 400;\n          }\n          if (isAPIError(err) && isUnauthorizedError(err)) {\n            ctx.body = {\n              type: ErrorType.Unauthorized,\n              message: err.message,\n              status: 401,\n            };\n            ctx.status = 401;\n          }\n          if (isAPIError(err) && isForbiddenError(err)) {\n            ctx.body = {\n              type: ErrorType.Forbidden,\n              message: err.message,\n              status: 403,\n            };\n            ctx.status = 403;\n          }\n          if (isAPIError(err) && isNotFoundError(err)) {\n            ctx.body = {\n              type: ErrorType.NotFound,\n              message: err.message,\n              status: 404,\n            };\n            ctx.status = 404;\n          }\n          if (isAPIError(err) && isInternalServerError(err)) {\n            ctx.body = {\n              type: ErrorType.InternalServerError,\n              message: err.message,\n              status: 500,\n            };\n            ctx.status = 500;\n          }\n          if (!isAPIError(err)) {\n            ctx.body = {\n              type: ErrorType.InternalServerError,\n              message: \"An internal server error occurred.\",\n              status: 500,\n            };\n            ctx.status = 500;\n          }\n        } else {\n          ctx.body = {\n            type: ErrorType.InternalServerError,\n            message: \"An internal server error occurred.\",\n            status: 500,\n          };\n          ctx.status = 500;\n        }\n      }\n    });\n\n    // Transform null's in request bodies back to undefined\n    serviceRouter.use((ctx, next) => {\n      if (\n        [\"POST\", \"PUT\", \"PATCH\"].includes(ctx.method) &&\n        ctx.request.body &&\n        typeof ctx.request.body === \"object\"\n      ) {\n        ctx.request.body = Object.fromEntries(\n          Object.entries(ctx.request.body).map(([key, value]) => [\n            key,\n            value === null ? undefined : value,\n          ])\n        );\n      }\n      return next();\n    });\n\n    // Transform query parameters back from kebab case to dotted format\n    // Ex. customer-name => customer.name\n    serviceRouter.use((ctx, next) => {\n      if (typeof ctx.query === \"object\") {\n        ctx.query = convertQueryParamKeysFromKabobCase(ctx.query);\n      }\n      return next();\n    });\n\n    serviceRouter.use(...this.middleware);\n\n    for (const controller of this.controllers) {\n      controller.service = this;\n      controller.bind(serviceRouter);\n    }\n\n    if (![\"\", \"/\"].includes(this.prefix)) {\n      target.use(this.prefix, serviceRouter.routes());\n      target.use(this.prefix, serviceRouter.allowedMethods());\n    } else {\n      target.use(serviceRouter.routes());\n      target.use(serviceRouter.allowedMethods());\n    }\n  }\n\n  init(target: Router<DefaultState, TExtend> = this.router) {\n    this.bind(target);\n    this.use(this.router.routes());\n    this.use(this.router.allowedMethods());\n  }\n\n  start(port = 8080, addresses: string[] = [\"127.0.0.1\"]) {\n    KoaQs(this as Koa, \"extended\");\n    this.init();\n    for (const address of addresses) {\n      this.listen(port, address);\n    }\n  }\n}\n","import {\n  Contact,\n  DEFAULT_SERVICE_CONFIGURATION,\n  License,\n  Server,\n  Service,\n  ServiceConfiguration,\n  ServiceOptions,\n} from \"./service\";\n\nexport interface CombinedServiceConfiguration extends ServiceConfiguration {\n  title?: string;\n  description?: string;\n  tags?: string[];\n  logo?: string;\n  version?: string;\n  contact?: Contact;\n  license?: License;\n  servers?: Server[];\n  onError?: (err: Error) => void;\n}\n\nexport interface CombinedServiceOptions<TExtend = Record<string, never>>\n  extends ServiceOptions<TExtend> {\n  children: Service<TExtend>[];\n  logo?: string;\n}\n\nexport const DEFAULT_COMBINED_SERVICE_CONFIGURATION = {\n  ...DEFAULT_SERVICE_CONFIGURATION,\n  title: \"\",\n  description: \"\",\n  tags: [] as string[],\n  contact: {\n    name: \"\",\n    email: \"\",\n    url: \"\",\n  },\n  license: {\n    name: \"\",\n    url: \"\",\n  },\n} as const;\n\nexport function isCombinedService<TExtend = Record<string, never>>(\n  service: Service<TExtend> | CombinedService<TExtend>\n): service is CombinedService<TExtend> {\n  return (\n    \"children\" in service &&\n    Array.isArray(service.children) &&\n    service.children.length > 0\n  );\n}\n\nexport class CombinedService<\n  TExtend = Record<string, never>,\n> extends Service<TExtend> {\n  children: Service<TExtend>[];\n  logo?: string;\n\n  constructor({ children, logo, ...options }: CombinedServiceOptions<TExtend>) {\n    super(options);\n    this.logo = logo;\n    this.children = children;\n  }\n}\n\n/**\n * Utility method for creating a single Axiom Service out of many independent services.\n * Useful when spinning up many microservices as a monolithic gateway bound to a single port.\n *\n * This method skips the regular bind phase of each service and instead creates an independent\n * Router for each service on which that services middleware and individual controllers are mounted\n * at the appropriate prefix.\n */\nexport function combineServices<TExtend = Record<string, never>>(\n  services: Service<TExtend>[],\n  config?: CombinedServiceConfiguration\n): Service<TExtend> {\n  const combinedConfig = {\n    ...DEFAULT_COMBINED_SERVICE_CONFIGURATION,\n    ...config,\n  };\n  const combinedService = new CombinedService<TExtend>({\n    servers: combinedConfig.servers,\n    title: combinedConfig.title,\n    description: combinedConfig.description,\n    logo: combinedConfig.logo,\n    tags: combinedConfig.tags,\n    children: services,\n    license: combinedConfig.license,\n    onError: combinedConfig.onError,\n  });\n\n  for (const service of services) {\n    service.config = combinedConfig;\n    service.init(combinedService.router);\n    service.onError = combinedService.onError;\n  }\n\n  return combinedService;\n}\n","import Cors, { Options as CorsOptions } from \"@koa/cors\";\nimport serverlessExpress, {\n  getCurrentInvoke,\n} from \"@vendia/serverless-express\";\nimport type { APIGatewayProxyEvent, Handler } from \"aws-lambda\";\nimport { RequestListener } from \"http\";\nimport Koa, { Context, Next, DefaultState } from \"koa\";\n\nimport { Service } from \"./service\";\n\ninterface ConfigureParams {\n  app: RequestListener;\n  resolutionMode: string;\n}\n\nexport const serverless = <TExtend = Record<string, never>>(\n  service: Service<TExtend>,\n  corsOptions?: CorsOptions\n): Handler => {\n  const constructWrappedKoaApp = (\n    app: Service<TExtend>\n  ): Koa<DefaultState, TExtend> => {\n    const wrapperApp = new Koa<DefaultState, TExtend>({});\n    wrapperApp.proxy = true;\n    wrapperApp.use(Cors(corsOptions));\n    wrapperApp.use(async (ctx: Context, next: Next) => {\n      const { event } = getCurrentInvoke() as { event: APIGatewayProxyEvent };\n      ctx.path = event.requestContext.path;\n      ctx.url = event.requestContext.path;\n      ctx.query = event.queryStringParameters ?? {};\n      await next();\n    });\n\n    app.use(Cors(corsOptions));\n    app.bind();\n\n    wrapperApp.use(app.router.routes());\n    wrapperApp.use(app.router.allowedMethods());\n\n    return wrapperApp;\n  };\n\n  return serverlessExpress({\n    app: constructWrappedKoaApp(service).callback(),\n    resolutionMode: \"PROMISE\",\n  } as unknown as ConfigureParams);\n};\n","import {\n  Middleware,\n  DefaultState,\n  DefaultContext,\n  ParameterizedContext,\n} from \"koa\";\n\nimport { T, Static, TSchema } from \"../common\";\n\nexport const Nullable = <T extends TSchema>(schema: T) =>\n  T.Union([schema, T.Null()]);\n\nexport type OperationContext<\n  T extends OperationDefinition<\n    TSchema,\n    TSchema,\n    TSchema,\n    TSchema\n  > = OperationDefinition<TSchema, TSchema, TSchema, TSchema>,\n  TExtend = Record<string, unknown>,\n> = ParameterizedContext<DefaultState, DefaultContext, Static<T[\"res\"]>> &\n  TExtend & {\n    body: Static<T[\"res\"]>;\n    query: Static<T[\"query\"]>;\n    params: Static<T[\"params\"]>;\n    request: ParameterizedContext[\"request\"] & { body: Static<T[\"req\"]> };\n  };\n\nexport type OperationDefinition<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TReq extends TSchema,\n  TRes extends TSchema,\n> = {\n  name: string;\n  method: \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\n  summary: string;\n  internal?: boolean;\n  description: string;\n  path: string;\n  params: TParams;\n  auth: boolean;\n  query: TQuery;\n  req: TReq;\n  res: TRes;\n  middleware: Middleware<DefaultState, OperationContext>[];\n  tags: string[];\n};\n\nexport type Operation<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TReq extends TSchema,\n  TRes extends TSchema,\n> = Partial<OperationDefinition<TParams, TQuery, TReq, TRes>> &\n  Pick<\n    OperationDefinition<TParams, TQuery, TReq, TRes>,\n    \"name\" | \"method\" | \"path\"\n  >;\n"],"mappings":"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","names":["Nullable","import_typebox","import_value","value","ErrorType","Router","import_router","Koa","Router","BodyParser","sizeOf","prettyBytes","KoaQs","import_koa","Koa","Cors","serverlessExpress","Nullable"]}