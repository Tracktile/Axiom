{"version":3,"sources":["../src/client/index.ts","../src/client/model.ts","../src/common/index.ts","../src/common/typebox.ts","../src/common/model.ts","../src/common/procedure.ts","../src/common/utils.ts","../src/common/errors.ts","../src/index.ts","../src/common/search.ts","../src/common/resource.ts","../src/client/request.ts","../src/client/procedure.ts","../src/client/resource.ts","../src/client/api.ts","../src/client/hooks.tsx"],"sourcesContent":["export * from \"./api\";\nexport * from \"./hooks\";\nexport * from \"./model\";\nexport * from \"./procedure\";\nexport * from \"./request\";\nexport * from \"./resource\";\n","import {\n  QueryClient,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { get, reverse, sortBy } from \"lodash\";\nimport { createRef, MutableRefObject, useMemo } from \"react\";\nimport {\n  APIError,\n  encodeSearchQuery,\n  Model,\n  noAdditionalProperties,\n  noEmptyStringValues,\n  OrderBy,\n  SearchParams,\n  SearchQuery,\n  SearchQueryField,\n  SearchQueryResult,\n  SearchResponse,\n  Static,\n  TSchema,\n  undefinedToNull,\n} from \"../common\";\nimport {\n  buildResourcePath,\n  createCreateRequestFn,\n  createGetRequestFn,\n  createRemoveRequestFn,\n  createSearchRequestFn,\n  createUpdateRequestFn,\n} from \"./request\";\n\nexport type AnyQueryResult = ReturnType<\n  ReactModel<any, any, any, any, any, any>[\"query\" | \"get\"]\n>;\n\nexport type AnyMutationResult = ReturnType<\n  ReactModel<any, any, any, any, any, any>[\"update\" | \"create\" | \"remove\"]\n>;\n\ntype AxiomGetOptions<TSortable> = {\n  id?: string;\n  fields?: SearchQuery<TSortable>[\"fields\"];\n  path?: Record<string, string | number>;\n};\n\ntype AxiomQueryOptions<TSortable> = {\n  offset?: number;\n  limit?: number;\n  orderBy?: string | OrderBy<TSortable>;\n  fields?: SearchQuery<TSortable>[\"fields\"];\n  comparator?: \"and\" | \"or\";\n  path?: Record<string, string | number>;\n  staleTime?: number;\n};\n\ntype AxiomModelMutationOptions<\n  TModal extends TSchema,\n  TArgs extends TSchema,\n> = UseMutationOptions<\n  Static<TModal>,\n  unknown,\n  Static<TArgs>,\n  TContext<Static<TModal>>\n>;\n\ntype TContext<TData = undefined> = { previous?: TData };\n\ninterface ModelBindOptions {\n  client: QueryClient;\n  baseUrl: string;\n  token: MutableRefObject<string | null>;\n}\n\ntype CachedCursors = Record<number, { next?: string; prev?: string }>;\n\nexport interface ReactModelOptions<\n  TModel extends Model<TM, TC, TU, any, any, any, TTransform, TSortable>,\n  TM extends TSchema,\n  TC extends TSchema,\n  TU extends TSchema,\n  TTransform extends (serialized: Static<TModel[\"schemas\"][\"model\"]>) => any,\n  TSortable extends TSchema = TM,\n> {\n  model: TModel;\n  baseUrl: string;\n  _unstable_offlineModel?: boolean;\n}\n\nexport class ReactModel<\n  TModel extends Model<TM, TC, TU, any, any, any, TTransform, TSortable>,\n  TM extends TSchema,\n  TC extends TSchema,\n  TU extends TSchema,\n  TTransform extends (serialized: Static<TModel[\"schemas\"][\"model\"]>) => any,\n  TSortable extends TSchema = TM,\n> {\n  model: TModel;\n  client?: QueryClient;\n  baseUrl: string;\n  token: MutableRefObject<string | null>;\n  _unstable_offlineModel?: boolean;\n\n  constructor(\n    options: ReactModelOptions<TModel, TM, TC, TU, TTransform, TSortable>\n  ) {\n    this.model = options.model;\n    this.token = createRef<string | null>();\n    this.baseUrl = \"\";\n    this._unstable_offlineModel = options._unstable_offlineModel ?? false;\n  }\n\n  modelKeys = {\n    get: (id: string) => [\"get\", this.model.name, id],\n    search: () => [\"search\", this.model.name],\n    searchBy: (\n      args: SearchQuery<TSortable> & { path?: Record<string, unknown> },\n      append?: string\n    ) => [\"search\", this.model.name, args, ...(append ? [append] : [])],\n    create: () => [\"create\", this.model.name],\n    update: () => [\"update\", this.model.name],\n    remove: () => [\"delete\", this.model.name],\n  };\n\n  transform(\n    serialized: Static<TModel[\"schemas\"][\"model\"]>\n  ): ReturnType<TTransform> {\n    return this.model.transformer(serialized);\n  }\n\n  private initializeCache() {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    const current = this.client.getQueryData<\n      SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n    >(this.modelKeys.search());\n\n    if (Array.isArray(current?.results)) {\n      this.sync(current.results);\n    } else {\n      this.client.setQueryData(this.modelKeys.search(), {\n        results: [],\n        total: 0,\n        offset: 0,\n        limit: 99,\n      });\n    }\n  }\n\n  private sync(\n    input:\n      | Static<TModel[\"schemas\"][\"model\"]>\n      | Static<TModel[\"schemas\"][\"model\"]>[]\n  ) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n\n    if (!this._unstable_offlineModel) {\n      return;\n    }\n\n    const searchQueries = this.client.getQueriesData<\n      SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n    >({ queryKey: this.modelKeys.search() });\n\n    const items = Array.isArray(input) ? input : [input];\n\n    for (const [key, current] of searchQueries) {\n      if (!current) {\n        continue;\n      }\n\n      const itemsToUpdate = items.filter((item) =>\n        current.results.some(\n          (i) => i[this.model.idKey] === item[this.model.idKey]\n        )\n      );\n      const itemsToAdd = items.filter(\n        (item) =>\n          !current.results.some(\n            (i) => i[this.model.idKey] === item[this.model.idKey]\n          )\n      );\n\n      this.client.setQueryData<\n        SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n      >(key, {\n        ...current,\n        results: [\n          ...current.results.map((i) => {\n            if (\n              itemsToUpdate.some(\n                (item) => item[this.model.idKey] === i[this.model.idKey]\n              )\n            ) {\n              return itemsToUpdate.find(\n                (item) => item[this.model.idKey] === i[this.model.idKey]\n              );\n            }\n            return i;\n          }),\n          ...itemsToAdd,\n        ],\n      });\n    }\n\n    this.client.setQueriesData<Static<TModel[\"schemas\"][\"model\"]>>(\n      {\n        queryKey: [\"get\", this.model.name],\n      },\n      (current) => {\n        return items.find(\n          (item) => item[this.model.idKey] === current?.[this.model.idKey]\n        );\n      }\n    );\n  }\n\n  private async destroy(id: string) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n\n    if (!this._unstable_offlineModel) {\n      return;\n    }\n\n    await Promise.all([\n      this.client.cancelQueries({\n        queryKey: this.modelKeys.get(id),\n      }),\n      this.client.cancelQueries({\n        queryKey: this.modelKeys.search(),\n      }),\n    ]);\n\n    const searchQueries = this.client.getQueriesData<\n      SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n    >({ queryKey: this.modelKeys.search() });\n\n    for (const key of searchQueries) {\n      const current = this.client.getQueryData<\n        SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n      >(key) ?? { results: [], total: 0, offset: 0, limit: 99 };\n      this.client.setQueryData<\n        SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n      >(key, {\n        ...current,\n        results: current.results.filter(\n          (item) => item[this.model.idKey] !== id\n        ),\n      });\n    }\n\n    this.client.setQueryData(this.modelKeys.get(id), null);\n  }\n\n  private getInitialSearchData({\n    limit = 99,\n    offset = 0,\n    orderBy,\n    fields = [],\n  }: AxiomQueryOptions<TSortable>) {\n    if (!this._unstable_offlineModel) {\n      return undefined;\n    }\n    const collection = this.client?.getQueryData<\n      SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n    >(this.modelKeys.search());\n\n    function matchesFields(fields: SearchQueryField[]) {\n      return (item: Static<TModel[\"schemas\"][\"model\"]>) => {\n        return fields.some((field) => {\n          const fieldValue = get(item, field.name) as string | number | boolean;\n          const compareValue =\n            typeof fieldValue === \"string\"\n              ? fieldValue.toLowerCase()\n              : fieldValue;\n          if (field.is) {\n            return String(compareValue) === String(field.is).toLowerCase();\n          }\n          if (field.isOneOf) {\n            return field.isOneOf.some((is) => is === compareValue);\n          }\n          if (field.contains) {\n            return String(compareValue).includes(\n              String(field.contains).toLowerCase()\n            );\n          }\n          if (field.isLikeOneOf) {\n            return field.isLikeOneOf.some(\n              (like) =>\n                String(compareValue).includes(String(like).toLowerCase()) &&\n                String(compareValue).includes(String(like).toLowerCase())\n            );\n          }\n          if (field.isGreaterThan) {\n            return compareValue > field.isGreaterThan;\n          }\n          if (field.isLessThan) {\n            return compareValue < field.isLessThan;\n          }\n          if (field.isBetween) {\n            return (\n              compareValue >= field.isBetween[0] &&\n              compareValue <= field.isBetween[1]\n            );\n          }\n\n          return false;\n        });\n      };\n    }\n\n    let results = collection?.results.filter(matchesFields(fields)) ?? [];\n    const { key = null, order = \"asc\" } =\n      typeof orderBy === \"string\"\n        ? (() => {\n            try {\n              return JSON.parse(orderBy);\n            } catch (e) {\n              return {};\n            }\n          })()\n        : orderBy || {};\n\n    if (key) {\n      results = sortBy(results, [key]);\n    }\n\n    if (order === \"desc\") {\n      results = reverse(results);\n    }\n\n    results = results.slice(offset, offset + limit);\n\n    return {\n      results,\n      total: results.length,\n      offset,\n      limit,\n    };\n  }\n\n  private preparePayloadForSubmission(schema: TSchema, payload: object) {\n    const pruned = undefinedToNull(\n      noEmptyStringValues(noAdditionalProperties(schema, payload))\n    );\n    return pruned;\n  }\n\n  private async defaultCreateOnMutate(\n    item: Static<TModel[\"schemas\"][\"create\"]>\n  ) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n\n    await Promise.all([\n      this.client.cancelQueries({\n        queryKey: this.modelKeys.get(String(item[this.model.idKey])),\n      }),\n      this.client.cancelQueries({\n        queryKey: this.modelKeys.search(),\n      }),\n    ]);\n\n    const previous = this.client.getQueryData<\n      Static<TModel[\"schemas\"][\"model\"]>\n    >(this.modelKeys.get(String(item[this.model.idKey])));\n\n    this.sync(item);\n\n    return { previous };\n  }\n\n  private defaultCreateOnSuccess() {\n    this.client?.invalidateQueries({\n      queryKey: this.modelKeys.search(),\n    });\n  }\n\n  private defaultCreateOnError(\n    err: APIError,\n    item: Static<TModel[\"schemas\"][\"model\"]>,\n    context?: TContext<Static<TModel[\"schemas\"][\"model\"]>>\n  ) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    if (context?.previous) {\n      this.destroy(String(item[this.model.idKey]));\n    }\n    this.client.invalidateQueries({\n      queryKey: this.modelKeys.search(),\n    });\n  }\n\n  private bindCreateMutation() {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    this.client.setMutationDefaults(this.modelKeys.create(), {\n      mutationFn: (item: Static<TModel[\"schemas\"][\"create\"]>) => {\n        const pruned = this.preparePayloadForSubmission(\n          this.model.schemas.create,\n          item as object\n        );\n        return createCreateRequestFn<TModel[\"schemas\"][\"model\"]>({\n          resourcePath: buildResourcePath(this.baseUrl, this.model.resource),\n          token: this.token,\n        })(pruned);\n      },\n      onMutate: this.defaultCreateOnMutate.bind(this),\n      onSuccess: this.defaultCreateOnSuccess.bind(this),\n      onError: this.defaultCreateOnError.bind(this),\n    });\n  }\n\n  private cacheCursor(\n    commonArgs: Record<string, unknown>,\n    offset: number,\n    limit: number,\n    next?: string,\n    prev?: string\n  ) {\n    if (next || prev) {\n      const key = this.modelKeys.searchBy(commonArgs, \"cursors\");\n      const cursors: CachedCursors = this.client?.getQueryData(key) || {};\n      if (next) {\n        cursors[offset + limit] = { next, prev: cursors[offset + limit]?.prev };\n        this.client?.setQueryData(key, cursors);\n      }\n      if (prev) {\n        cursors[offset - limit] = { prev, next: cursors[offset - limit]?.next };\n        this.client?.setQueryData(key, cursors);\n      }\n    }\n  }\n\n  private getCursor(\n    commonArgs: Record<string, unknown>,\n    offset: number\n  ): {\n    next?: string;\n    prev?: string;\n    knownCursors?: { [offset: number]: string };\n  } {\n    const key = this.modelKeys.searchBy(commonArgs, \"cursors\");\n    const cursors: CachedCursors = this.client?.getQueryData(key) || {};\n    let knownCursors = undefined;\n    if (!cursors[offset]?.next) {\n      const entries = Object.entries(cursors);\n      const { bestOffset, bestNext } = entries.reduce<{\n        bestOffset: number;\n        bestNext: string;\n      }>(\n        (acc, [curOffset, { next }]) => {\n          if (+curOffset > acc.bestOffset && +curOffset < offset) {\n            return { bestOffset: +curOffset, bestNext: next || \"\" };\n          }\n          return acc;\n        },\n        { bestOffset: -1, bestNext: \"\" }\n      );\n      if (bestNext) {\n        knownCursors = { [bestOffset]: bestNext };\n      }\n    }\n    return { knownCursors, ...(cursors[offset] || {}) };\n  }\n\n  private async defaultUpdateOnMutate(\n    item: Static<TModel[\"schemas\"][\"model\"]>\n  ): Promise<TContext<Static<TModel[\"schemas\"][\"model\"]>>> {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    await Promise.all([\n      this.client.cancelQueries({\n        queryKey: this.modelKeys.get(String(item[this.model.idKey])),\n      }),\n      this.client.cancelQueries({\n        queryKey: this.modelKeys.search(),\n      }),\n    ]);\n\n    const previous = this.client.getQueryData<\n      Static<TModel[\"schemas\"][\"model\"]>\n    >(this.modelKeys.get(String(item[this.model.idKey])));\n\n    if (previous) {\n      this.sync(Object.assign(previous, item));\n    } else {\n      this.sync(item);\n    }\n\n    return { previous };\n  }\n\n  private defaultUpdateOnSuccess() {\n    this.client?.invalidateQueries({\n      queryKey: this.modelKeys.search(),\n    });\n  }\n\n  private defaultUpdateOnError(\n    err: APIError,\n    _item: Static<TModel[\"schemas\"][\"model\"]>,\n    context?: TContext<Static<TModel[\"schemas\"][\"model\"]>>\n  ) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    if (context?.previous) {\n      this.sync(context.previous);\n    }\n    this.client?.invalidateQueries({\n      queryKey: this.modelKeys.search(),\n    });\n  }\n\n  bindUpdateMutation() {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    this.client.setMutationDefaults(this.modelKeys.update(), {\n      mutationFn: (item: Static<TModel[\"schemas\"][\"update\"]>) => {\n        const id = item[this.model.idKey] as string | number;\n        const pruned = this.preparePayloadForSubmission(\n          this.model.schemas.update,\n          item as object\n        );\n        return createUpdateRequestFn<TModel[\"schemas\"][\"model\"]>({\n          resourcePath: buildResourcePath(this.baseUrl, this.model.resource),\n          token: this.token,\n        })(id, pruned);\n      },\n      onMutate: this.defaultUpdateOnMutate.bind(this),\n      onSuccess: this.defaultUpdateOnSuccess.bind(this),\n      onError: this.defaultUpdateOnError.bind(this),\n    });\n  }\n\n  private async defaultRemoveOnMutate(\n    item: Static<TModel[\"schemas\"][\"model\"]>\n  ): Promise<TContext<Static<TModel[\"schemas\"][\"model\"]>>> {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    await this.client.cancelQueries({\n      queryKey: this.modelKeys.search(),\n    });\n\n    const previous = this.client.getQueryData<\n      Static<TModel[\"schemas\"][\"model\"]>\n    >(this.modelKeys.get(String(item[this.model.idKey])));\n\n    this.destroy(String(item[this.model.idKey]));\n\n    this.client.setQueryData(\n      this.modelKeys.get(String(item[this.model.idKey])),\n      null\n    );\n    return { previous };\n  }\n\n  private defaultRemoveOnSuccess() {\n    this.client?.invalidateQueries({\n      queryKey: this.modelKeys.search(),\n    });\n  }\n\n  private defaultRemoveOnError(\n    err: APIError,\n    _item: Static<TModel[\"schemas\"][\"model\"]>,\n    context?: TContext<Static<TModel[\"schemas\"][\"model\"]>>\n  ) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    if (typeof context?.previous !== \"undefined\") {\n      this.sync(context.previous);\n    }\n    this.client.invalidateQueries({\n      queryKey: this.modelKeys.search(),\n    });\n  }\n\n  bindRemoveMutation() {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    this.client.setMutationDefaults(this.modelKeys.remove(), {\n      retry: false,\n      mutationFn: (item: Static<TModel[\"schemas\"][\"model\"]>) => {\n        const id = item[this.model.idKey] as string | number;\n        return createRemoveRequestFn<TModel[\"schemas\"][\"model\"]>({\n          resourcePath: buildResourcePath(this.baseUrl, this.model.resource),\n          token: this.token,\n        })(id, item);\n      },\n      onMutate: this.defaultRemoveOnMutate.bind(this),\n      onSuccess: this.defaultRemoveOnSuccess.bind(this),\n      onError: this.defaultRemoveOnError.bind(this),\n    });\n  }\n\n  bind({ client, baseUrl, token }: ModelBindOptions) {\n    this.client = client;\n    this.baseUrl = baseUrl;\n    this.token = token;\n    this.bindCreateMutation();\n    this.bindUpdateMutation();\n    this.bindRemoveMutation();\n    if (this._unstable_offlineModel) {\n      this.initializeCache();\n    }\n    return this;\n  }\n\n  get(\n    { id = \"\", fields = [], path = {} }: AxiomGetOptions<TSortable> = {\n      id: \"\",\n      fields: [],\n      path: {},\n    },\n    options?: Partial<\n      UseQueryOptions<\n        Static<TModel[\"schemas\"][\"model\"]>,\n        APIError,\n        ReturnType<TTransform>\n      >\n    >\n  ) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const query = useQuery({\n      queryKey: [...this.modelKeys.get(id), path],\n      enabled: options?.enabled !== false,\n      refetchInterval: false,\n      refetchIntervalInBackground: false,\n      refetchOnMount: true,\n      retryOnMount: true,\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      retry: false,\n      staleTime: 0,\n      gcTime: 0,\n      initialData: this._unstable_offlineModel\n        ? () => {\n            return this.peek(id);\n          }\n        : undefined,\n      ...options,\n      queryFn: () =>\n        createGetRequestFn<TModel[\"schemas\"][\"model\"]>({\n          resourcePath: buildResourcePath(\n            this.baseUrl,\n            this.model.resource,\n            path\n          ),\n          token: this.token,\n        })(id, encodeSearchQuery(fields)),\n      select: (data) => this.transform(data),\n    });\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const ret = useMemo(\n      () => ({\n        ...query,\n        isUpdating: query.isLoading || query.isFetching,\n        data: query.data ?? undefined,\n      }),\n      [query]\n    );\n    return ret;\n  }\n\n  query(\n    {\n      offset,\n      limit = 99,\n      orderBy,\n      fields = [],\n      comparator = \"or\",\n      path,\n    }: AxiomQueryOptions<TSortable> = {},\n    options?: Partial<\n      UseQueryOptions<\n        SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>,\n        APIError,\n        SearchQueryResult<ReturnType<TTransform>>\n      >\n    >\n  ) {\n    const commonArgs = {\n      orderBy,\n      fields,\n      path,\n    };\n\n    const queryKey = this.modelKeys.searchBy({\n      limit,\n      offset,\n      ...commonArgs,\n    });\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const query = useQuery({\n      queryKey,\n      queryFn: async () => {\n        const searchQuery = encodeSearchQuery(fields);\n        const cursor = this.getCursor(commonArgs, offset || 0);\n\n        const { results, total, next, prev } = await createSearchRequestFn<\n          TModel[\"schemas\"][\"model\"]\n        >({\n          resourcePath: buildResourcePath(\n            this.baseUrl,\n            this.model.resource,\n            path\n          ),\n          token: this.token,\n          headers: {\n            \"X-Pagination-Fieldoperator\": comparator,\n          },\n        })({\n          limit,\n          offset,\n          orderBy:\n            typeof orderBy === \"string\" ? orderBy : JSON.stringify(orderBy),\n          next: cursor.next,\n          // prev: cursor.prev, // ignoring prev for now since the BE is not dealing with it correctly\n          knownCursors:\n            cursor.knownCursors && JSON.stringify(cursor.knownCursors),\n          ...searchQuery,\n        });\n\n        if (options?.enabled !== false) {\n          this.cacheCursor(commonArgs, offset || 0, limit, next, prev);\n        }\n\n        this.sync(results);\n\n        return {\n          results,\n          total,\n          offset,\n          limit,\n          next,\n          prev,\n        };\n      },\n      refetchInterval: false,\n      refetchIntervalInBackground: false,\n      refetchOnMount: true,\n      retryOnMount: true,\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      retry: false,\n      staleTime: 0,\n      gcTime: 0,\n      initialData: this._unstable_offlineModel\n        ? () => {\n            return this.getInitialSearchData({\n              limit,\n              offset,\n              orderBy,\n              fields,\n            });\n          }\n        : undefined,\n      ...options,\n      select: (data: SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>) => {\n        return Object.assign(data, {\n          results: data.results.map((d) => this.transform(d)),\n        });\n      },\n    });\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const emptyResults = useMemo(() => [], []);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const ret = useMemo(() => {\n      return {\n        ...query,\n        data: query.data?.results ?? emptyResults,\n        total: query.data?.total ?? 0,\n        offset: query.data?.offset ?? 0,\n        limit: query.data?.limit ?? 99,\n        isUpdating: query.isLoading || query.isFetching,\n      };\n    }, [query]);\n    return ret;\n  }\n\n  create(\n    options: AxiomModelMutationOptions<\n      TModel[\"schemas\"][\"model\"],\n      TModel[\"schemas\"][\"create\"]\n    > = {}\n  ) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMutation<\n      Static<TModel[\"schemas\"][\"model\"]>,\n      APIError,\n      Static<TModel[\"schemas\"][\"create\"]>,\n      TContext<Static<TModel[\"schemas\"][\"model\"]>>\n    >({\n      mutationKey: this.modelKeys.create(),\n      ...options,\n      onSuccess: (data, variables, context) => {\n        this.defaultCreateOnSuccess();\n        options.onSuccess?.(data, variables, context);\n      },\n      onError: (error, variables, context) => {\n        this.defaultCreateOnError(error, variables, context);\n        options.onError?.(error, variables, context);\n      },\n    });\n  }\n\n  update(\n    options: AxiomModelMutationOptions<\n      TModel[\"schemas\"][\"model\"],\n      TModel[\"schemas\"][\"update\"]\n    > = {}\n  ) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMutation<\n      Static<TModel[\"schemas\"][\"model\"]>,\n      APIError,\n      Static<TModel[\"schemas\"][\"update\"]>,\n      TContext<Static<TModel[\"schemas\"][\"model\"]>>\n    >({\n      mutationKey: this.modelKeys.update(),\n      ...options,\n      onSuccess: (data, variables, context) => {\n        this.defaultUpdateOnSuccess();\n        options.onSuccess?.(data, variables, context);\n      },\n      onError: (error, variables, context) => {\n        this.defaultUpdateOnError(error, variables, context);\n        options.onError?.(error, variables, context);\n      },\n    });\n  }\n\n  remove(\n    options: AxiomModelMutationOptions<\n      TModel[\"schemas\"][\"model\"],\n      TModel[\"schemas\"][\"model\"]\n    > = {}\n  ) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMutation<\n      Static<TModel[\"schemas\"][\"model\"]>,\n      APIError,\n      Static<TModel[\"schemas\"][\"model\"]>,\n      TContext<Static<TModel[\"schemas\"][\"model\"]>>\n    >({\n      mutationKey: this.modelKeys.remove(),\n      ...options,\n      onSuccess: (data, variables, context) => {\n        this.defaultRemoveOnSuccess();\n        options.onSuccess?.(data, variables, context);\n      },\n      onError: (error, variables, context) => {\n        this.defaultRemoveOnError(error, variables, context);\n        options.onError?.(error, variables, context);\n      },\n    });\n  }\n\n  invalidate() {\n    this.client?.invalidateQueries({ queryKey: this.modelKeys.search() });\n  }\n\n  invalidateById(id: string) {\n    this.client?.invalidateQueries({ queryKey: this.modelKeys.get(id) });\n  }\n\n  read(): Static<TModel[\"schemas\"][\"model\"]>[] | undefined {\n    return this.client?.getQueryData(this.modelKeys.search());\n  }\n\n  readOne(id: string): Static<TModel[\"schemas\"][\"model\"]> | undefined {\n    return this.client?.getQueryData(this.modelKeys.get(id));\n  }\n\n  peek(id: string): Static<TModel[\"schemas\"][\"model\"]> | undefined {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n    const { results = [] } =\n      this.client.getQueryData<\n        SearchQueryResult<Static<TModel[\"schemas\"][\"model\"]>>\n      >(this.modelKeys.search()) ?? {};\n\n    return results.find((item) => item[this.model.idKey] === id);\n  }\n\n  warm(options: {\n    queryOptions?: AxiomQueryOptions<TSortable>;\n    refetchInterval?: number;\n  }) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n\n    const { queryOptions = {}, refetchInterval = 30000 } = options;\n    const {\n      limit = 99,\n      offset,\n      orderBy,\n      fields = [],\n      comparator = \"or\",\n      path,\n    } = queryOptions;\n\n    const commonArgs = {\n      orderBy,\n      fields,\n      path,\n    };\n\n    const queryKey = this.modelKeys.searchBy({\n      limit,\n      offset,\n      ...commonArgs,\n    });\n\n    return useQuery({\n      queryKey,\n      queryFn: async () => {\n        const searchQuery = encodeSearchQuery(fields);\n        const cursor = this.getCursor(commonArgs, offset || 0);\n\n        const { results, total, next, prev } = await createSearchRequestFn<\n          TModel[\"schemas\"][\"model\"]\n        >({\n          resourcePath: buildResourcePath(\n            this.baseUrl,\n            this.model.resource,\n            path\n          ),\n          token: this.token,\n          headers: {\n            \"X-Pagination-Fieldoperator\": comparator,\n          },\n        })({\n          limit,\n          offset,\n          orderBy:\n            typeof orderBy === \"string\" ? orderBy : JSON.stringify(orderBy),\n          next: cursor.next,\n          knownCursors:\n            cursor.knownCursors && JSON.stringify(cursor.knownCursors),\n          ...searchQuery,\n        });\n\n        this.cacheCursor(commonArgs, offset || 0, limit, next, prev);\n        this.sync(results);\n\n        return {\n          results,\n          total,\n          offset,\n          limit,\n          next,\n          prev,\n        };\n      },\n      staleTime: 0,\n      gcTime: Infinity,\n      select: () => undefined,\n      refetchInterval,\n    });\n  }\n\n  async prefetch(params: {\n    queryOptions?: AxiomQueryOptions<TSortable>;\n    queryConfig?: Partial<UseQueryOptions>;\n  }) {\n    if (!this.client) {\n      throw new Error(\"Client is not bound\");\n    }\n\n    const { queryOptions = {}, queryConfig = {} } = params;\n    const { limit = 99, offset, orderBy, fields = [], path } = queryOptions;\n\n    const commonArgs = {\n      orderBy,\n      fields,\n      path,\n    };\n\n    const queryKey = this.modelKeys.searchBy({\n      limit,\n      offset,\n      ...commonArgs,\n    });\n\n    return this.client.prefetchQuery({\n      ...queryConfig,\n      queryKey,\n      queryFn: async () => {\n        const searchQuery = encodeSearchQuery(queryOptions.fields || []);\n        const cursor = this.getCursor({}, 0);\n\n        const { results, total, next, prev } = await createSearchRequestFn<\n          TModel[\"schemas\"][\"model\"]\n        >({\n          resourcePath: buildResourcePath(this.baseUrl, this.model.resource),\n          token: this.token,\n          headers: {\n            \"X-Pagination-Fieldoperator\": queryOptions.comparator ?? \"or\",\n          },\n        })({\n          limit: queryOptions.limit ?? 99,\n          offset: queryOptions.offset,\n          orderBy:\n            typeof queryOptions.orderBy === \"string\"\n              ? queryOptions.orderBy\n              : JSON.stringify(queryOptions.orderBy),\n          next: cursor.next,\n          knownCursors:\n            cursor.knownCursors && JSON.stringify(cursor.knownCursors),\n          ...searchQuery,\n        });\n\n        if (this._unstable_offlineModel) {\n          this.sync(results);\n        }\n\n        return {\n          results: results.map((d) => this.transform(d)),\n          total,\n          offset: queryOptions.offset ?? 0,\n          limit: queryOptions.limit ?? 99,\n          next,\n          prev,\n        };\n      },\n    });\n  }\n\n  updateCacheById(id: string, model: Static<TModel[\"schemas\"][\"model\"]>) {\n    this.client?.setQueryData(this.modelKeys.get(id), model);\n  }\n\n  private prepareSearchParams(\n    params: Omit<SearchParams, \"cursor\">,\n    pageParam: unknown\n  ): Record<string, string | number | boolean | undefined> {\n    const { sort, ...rest } = params;\n\n    const searchParams = {\n      ...rest,\n      cursor: typeof pageParam === \"string\" ? pageParam : undefined,\n      limit: params?.limit ?? this.model.infiniteSearch?.defaultLimit ?? 50,\n    };\n\n    // Handle sort serialization if present\n    if (sort) {\n      return {\n        ...searchParams,\n        sort: JSON.stringify(sort),\n      };\n    }\n\n    return searchParams;\n  }\n\n  useInfiniteSearch(\n    params?: Omit<SearchParams, \"cursor\">,\n    options?: Partial<\n      UseInfiniteQueryOptions<SearchResponse<ReturnType<TTransform>>, APIError>\n    >\n  ) {\n    if (!this.model.infiniteSearch?.enabled) {\n      throw new Error(\"Infinite search is not enabled for this model\");\n    }\n\n    const queryKey = this.modelKeys.searchBy(\n      params ?? { limit: this.model.infiniteSearch?.defaultLimit ?? 50 },\n      \"infinite\"\n    );\n\n    return useInfiniteQuery({\n      queryKey,\n      initialPageParam: null as string | null,\n      queryFn: async ({ pageParam }) => {\n        const searchParams = this.prepareSearchParams(\n          params ?? { limit: this.model.infiniteSearch?.defaultLimit ?? 50 },\n          pageParam\n        );\n\n        const response = await createSearchRequestFn({\n          resourcePath: buildResourcePath(this.baseUrl, this.model.resource),\n          token: this.token,\n        })(searchParams);\n\n        return {\n          results: response.results.map((result) => this.transform(result)),\n          nextCursor: response.next,\n          total: response.total,\n          metadata: {\n            currentResults: response.results.length,\n            historicalResults: 0,\n            timePeriodCovered: [\n              new Date().toISOString(),\n              new Date().toISOString(),\n            ] as [string, string],\n          },\n        } satisfies SearchResponse<ReturnType<TTransform>>;\n      },\n      getNextPageParam: (lastPage) => lastPage.nextCursor ?? null,\n      ...options,\n    });\n  }\n}\n\nexport type PaginationParams = {\n  offset?: number;\n  limit?: number;\n  orderBy?: string;\n  next?: string;\n  prev?: string;\n  knownCursors?: string;\n};\n","export * from \"./typebox\";\nexport * from \"./model\";\nexport * from \"./procedure\";\nexport * from \"./utils\";\nexport * from \"./types\";\nexport * from \"./errors\";\nexport * from \"./search\";\nexport * from \"./resource\";\n","export * from \"@sinclair/typebox\";\nexport { Type as T, TypeGuard } from \"@sinclair/typebox\";\nexport { Value } from \"@sinclair/typebox/value\";\nexport { TypeCompiler } from \"@sinclair/typebox/compiler\";\nexport { TypeSystem } from \"@sinclair/typebox/system\";\n","import { Static, T, TObject, TSchema } from \"../common\";\n\nexport type ModelOptions<\n  TModel extends TSchema,\n  TCreate extends TSchema,\n  TUpdate extends TSchema,\n  TDelete extends TSchema,\n  TQuery extends TSchema,\n  TPath extends TSchema,\n  TTransform extends (serialized: Static<TModel>) => any,\n  TSortable extends TSchema,\n> = {\n  name: string;\n  resource: string;\n  idKey: Exclude<keyof Static<TModel>, symbol>;\n  model: TModel;\n  create?: TCreate;\n  update?: TUpdate;\n  del?: TDelete;\n  query?: TQuery;\n  path?: TPath;\n  transformer: TTransform;\n  sortableBy?: TSortable;\n  _unstable_offlineModel?: boolean;\n  infiniteSearch?: {\n    enabled: boolean;\n    defaultLimit?: number;\n  };\n};\n\nexport class Model<\n  TModel extends TSchema,\n  TCreate extends TSchema = TModel,\n  TUpdate extends TSchema = TModel,\n  TDelete extends TSchema = TObject,\n  TQuery extends TSchema = TObject,\n  TPath extends TSchema = TObject,\n  TTransform extends (serialized: Static<TModel>) => any = (\n    m: Static<TModel>\n  ) => typeof m,\n  TSortable extends TSchema = TModel,\n> {\n  name: string;\n  resource: string;\n  idKey: Exclude<keyof Static<TModel>, symbol>;\n  schemas: {\n    model: TModel;\n    create: TCreate;\n    update: TUpdate;\n    del: TDelete;\n    query: TQuery;\n    path: TPath;\n  };\n  transformer: TTransform;\n  sortableBy: TSortable;\n  _unstable_offlineModel?: boolean;\n  infiniteSearch?: {\n    enabled: boolean;\n    defaultLimit: number;\n  };\n\n  constructor(\n    options: ModelOptions<\n      TModel,\n      TCreate,\n      TUpdate,\n      TDelete,\n      TQuery,\n      TPath,\n      TTransform,\n      TSortable\n    >\n  ) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.idKey = options.idKey;\n    this.schemas = {\n      model: options.model,\n      create: options.create ?? (options.model as unknown as TCreate),\n      update: options.update ?? (options.model as unknown as TUpdate),\n      del: options.del ?? (T.Object({}) as unknown as TDelete),\n      path: options.path ?? (T.Object({}) as unknown as TPath),\n      query: options.query ?? (T.Object({}) as unknown as TQuery),\n    };\n    this.transformer = options.transformer;\n    this.sortableBy =\n      options.sortableBy || (options.model as unknown as TSortable);\n    this._unstable_offlineModel = options._unstable_offlineModel ?? false;\n    this.infiniteSearch = options.infiniteSearch\n      ? {\n          enabled: options.infiniteSearch.enabled,\n          defaultLimit: options.infiniteSearch.defaultLimit ?? 50,\n        }\n      : undefined;\n  }\n\n  getSearchResponseType(): TSchema {\n    return T.Object({\n      results: T.Array(this.schemas.model),\n      nextCursor: T.Optional(T.String()),\n      total: T.Number(),\n      metadata: T.Object({\n        currentResults: T.Number(),\n        historicalResults: T.Number(),\n        timePeriodCovered: T.Tuple([T.String(), T.String()]),\n      }),\n    });\n  }\n\n  getSearchParamsType(): TSchema {\n    return T.Object({\n      cursor: T.Optional(T.String()),\n      limit: T.Optional(T.Number()),\n      search: T.Optional(T.String()),\n      filters: T.Optional(\n        T.Array(\n          T.Object({\n            field: T.String(),\n            operator: T.Union([\n              T.Literal(\"eq\"),\n              T.Literal(\"contains\"),\n              T.Literal(\"gt\"),\n              T.Literal(\"lt\"),\n              T.Literal(\"between\"),\n            ]),\n            value: T.Union([\n              T.String(),\n              T.Number(),\n              T.Boolean(),\n              T.Array(T.Union([T.String(), T.Number()])),\n            ]),\n          })\n        )\n      ),\n      sort: T.Optional(\n        T.Object({\n          field: T.String(),\n          direction: T.Union([T.Literal(\"asc\"), T.Literal(\"desc\")]),\n        })\n      ),\n    });\n  }\n}\n\nexport function createModel<\n  TModel extends TSchema,\n  TCreate extends TSchema,\n  TUpdate extends TSchema,\n  TDelete extends TSchema,\n  TQuery extends TSchema,\n  TPath extends TSchema,\n  TTransformer extends (serialized: Static<TModel>) => any,\n  TSortable extends TSchema = TModel,\n>(\n  options: ModelOptions<\n    TModel,\n    TCreate,\n    TUpdate,\n    TDelete,\n    TQuery,\n    TPath,\n    TTransformer,\n    TSortable\n  >\n) {\n  return new Model<\n    TModel,\n    TCreate,\n    TUpdate,\n    TDelete,\n    TQuery,\n    TPath,\n    TTransformer,\n    TSortable\n  >(options);\n}\n","import { T, TSchema } from \"../common\";\n\nexport interface ProcedureOptions<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  name: string;\n  resource: string;\n  params: TParams;\n  result: TResult;\n  query?: TQuery;\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n}\n\nexport class Procedure<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  name: string;\n  resource: string;\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" = \"GET\";\n  params: TParams;\n  query: TQuery;\n  result: TResult;\n\n  constructor(options: ProcedureOptions<TParams, TQuery, TResult>) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.params = options.params;\n    this.result = options.result;\n    this.query = options.query ?? (T.Object({}) as unknown as TQuery);\n    this.method = options.method || \"GET\";\n  }\n}\n\nexport function createProcedure<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n>(options: ProcedureOptions<TParams, TQuery, TResult>) {\n  return new Procedure(options);\n}\n","import { Value, Type, Static, TSchema, TypeGuard, TObject } from \"./typebox\";\nimport { GetFieldType } from \"./types\";\n\nexport function convertQueryParamKeysToKabobCase<T extends object>(obj: T) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, val]) => [key.replace(/0/g, \".\"), val])\n  );\n}\n\nexport function convertQueryParamKeysFromKabobCase<T extends object>(obj: T) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, val]) => [key.replace(/,/g, \"-\"), val])\n  );\n}\n\nexport function getValue<\n  TData,\n  TPath extends string,\n  TDefault = GetFieldType<TData, TPath>,\n>(\n  data: TData,\n  path: TPath,\n  defaultValue?: TDefault\n): GetFieldType<TData, TPath> | TDefault {\n  const value = path\n    .split(/[.[\\]]/)\n    .filter(Boolean)\n    .reduce<GetFieldType<TData, TPath>>(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (value, key) => (value as any)?.[key],\n      data as any\n    );\n\n  return value !== undefined ? value : (defaultValue as TDefault);\n}\n\nexport function Nullable<T extends TSchema>(schema: T) {\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true });\n}\n\nexport function noAdditionalPropertiesInSchema<T extends TSchema>(\n  schema: T\n): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: noAdditionalPropertiesInSchema(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      additionalProperties: false,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          noAdditionalPropertiesInSchema(value),\n        ])\n      ),\n    };\n  }\n  return schema;\n}\n\nexport function withDefaultsForStringFormats<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withDefaultsForStringFormats(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withDefaultsForStringFormats(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsString(schema) && typeof schema.format !== \"undefined\") {\n    return {\n      ...schema,\n      default: \"\",\n    };\n  }\n  return schema;\n}\n\nexport function withNoStringFormats<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withNoStringFormats(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withNoStringFormats(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsString(schema) && typeof schema.format !== \"undefined\") {\n    return {\n      ...schema,\n      format: undefined,\n    };\n  }\n  return schema;\n}\n\nexport function withNoEnumValues<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withNoEnumValues(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties)\n          .filter(([, value]) => {\n            return !TypeGuard.IsUnion(value);\n          })\n          .map(([key, value]) => [key, withNoEnumValues(value)])\n      ),\n    };\n  }\n  return schema;\n}\n\nexport function withDatesAsDateTimeStrings<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withDatesAsDateTimeStrings(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withDatesAsDateTimeStrings(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsDate(schema)) {\n    return {\n      ...schema,\n      type: \"string\",\n      format: \"date-time\",\n    };\n  }\n  return schema;\n}\n\nexport function noEmptyStringValues<T extends object>(obj: T): Partial<T> {\n  return Object.entries(obj).reduce((acc, [key, val]) => {\n    if (val !== \"\") {\n      return { ...acc, [key]: val };\n    }\n    return acc;\n  }, {} as Partial<T>);\n}\n\nexport function noAdditionalProperties<T, I>(schema: T, input: I): I {\n  if (TypeGuard.IsArray(schema) && Array.isArray(input)) {\n    return input.map(\n      (item) => noAdditionalProperties(schema.items, item) as unknown as T\n    ) as I;\n  }\n  if (\n    TypeGuard.IsObject(schema) &&\n    typeof input === \"object\" &&\n    input !== null\n  ) {\n    const prunedInput: Partial<I> = {};\n    for (const [key, value] of Object.entries(input)) {\n      if (key in schema.properties) {\n        prunedInput[key as keyof I] = noAdditionalProperties(\n          schema.properties[key],\n          value\n        );\n      }\n    }\n    return prunedInput as I;\n  }\n  return input;\n}\n\nexport function shallowSchemaProperties<T extends TObject>(schema: T) {\n  return {\n    ...schema,\n    properties: Object.fromEntries(\n      Object.entries(schema.properties).filter(\n        ([, prop]) => !TypeGuard.IsArray(prop) && !TypeGuard.IsObject(prop)\n      )\n    ),\n  };\n}\n\nexport function undefinedToNull<T extends object>(input: T) {\n  return Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [\n      key,\n      value === undefined ? null : value,\n    ])\n  );\n}\n\nexport function trueFalseStringsToBoolean<T extends object>(input: T) {\n  return Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [\n      key,\n      value === \"true\" ? true : value === \"false\" ? false : value,\n    ])\n  );\n}\n\nexport function cast<T extends TSchema>(schema: T, value: unknown) {\n  return Value.Cast(schema, value);\n}\n","import { CustomError } from \"ts-custom-error\";\n\nexport enum ErrorType {\n  // 400\n  BadRequest = \"BadRequest\",\n  // 401\n  Unauthorized = \"Unauthorized\",\n  // 403\n  Forbidden = \"Forbidden\",\n  // 404\n  NotFound = \"NotFound\",\n  // 500\n  InternalServerError = \"InternalServerError\",\n}\n\nexport class APIError extends CustomError {\n  type: ErrorType;\n  status: number;\n  errors: Record<string, unknown>;\n  constructor(\n    status: number,\n    message: string,\n    errors: Record<string, string> = {}\n  ) {\n    super(message);\n    this.type = ErrorType.InternalServerError;\n    this.status = status;\n    this.errors = errors;\n  }\n}\n\nexport function isAPIError(error: unknown): error is APIError {\n  return (\n    !!error &&\n    typeof error === \"object\" &&\n    \"status\" in error &&\n    typeof error.status === \"number\"\n  );\n}\n\nexport class BadRequestError extends APIError {\n  fields: Record<string, string>;\n  constructor(message?: string, fieldErrors?: Record<string, string>) {\n    super(400, message || \"Bad Request\");\n    this.type = ErrorType.BadRequest;\n    this.fields = fieldErrors || {};\n  }\n}\n\nexport function isBadRequestError(error: APIError): error is BadRequestError {\n  return error.type === ErrorType.BadRequest && error.status === 400;\n}\n\nexport class UnauthorizedError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(401, message || \"Unauthorized\", errors);\n    this.type = ErrorType.Unauthorized;\n  }\n}\n\nexport function isUnauthorizedError(\n  error: APIError\n): error is UnauthorizedError {\n  return error.type === ErrorType.Unauthorized && error.status === 401;\n}\n\nexport class ForbiddenError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(403, message || \"Forbidden\", errors);\n    this.type = ErrorType.Forbidden;\n  }\n}\n\nexport function isForbiddenError(error: APIError): error is ForbiddenError {\n  return error.type === ErrorType.Forbidden && error.status === 403;\n}\n\nexport class NotFoundError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(404, message || \"Not Found\", errors);\n    this.type = ErrorType.NotFound;\n  }\n}\n\nexport function isNotFoundError(error: APIError): error is NotFoundError {\n  return error.type === ErrorType.NotFound && error.status === 404;\n}\n\nexport class InternalServerError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(500, message || \"Internal Server Error\", errors);\n    this.type = ErrorType.InternalServerError;\n  }\n}\n\nexport function isInternalServerError(\n  error: APIError\n): error is InternalServerError {\n  return error.type === ErrorType.InternalServerError && error.status === 500;\n}\n\nexport const assert = (\n  condition: any,\n  message: string,\n  error = BadRequestError\n) => {\n  if (!condition) {\n    throw new error(message);\n  }\n};\n","export * from \"./common\";\n","import { T } from \"../\";\n\nexport interface SearchMetadata {\n  currentResults: number;\n  historicalResults: number;\n  timePeriodCovered: [string, string];\n}\n\nexport const SearchMetadataSchema = T.Object({\n  currentResults: T.Number(),\n  historicalResults: T.Number(),\n  timePeriodCovered: T.Tuple([T.String(), T.String()]),\n});\n\nexport interface SearchResponse<T> {\n  results: T[];\n  nextCursor?: string;\n  total: number;\n  metadata: SearchMetadata;\n}\n\nexport const SearchResponseSchema = T.Object({\n  results: T.Array(T.Any()),\n  nextCursor: T.Optional(T.String()),\n  total: T.Number(),\n  metadata: SearchMetadataSchema,\n});\n\nexport interface SearchFilter {\n  field: string;\n  operator: \"eq\" | \"contains\" | \"gt\" | \"lt\" | \"between\";\n  value: string | number | boolean | [string | number];\n}\n\nexport const SearchFilterSchema = T.Object({\n  field: T.String(),\n  operator: T.Union([\n    T.Literal(\"eq\"),\n    T.Literal(\"contains\"),\n    T.Literal(\"gt\"),\n    T.Literal(\"lt\"),\n    T.Literal(\"between\"),\n  ]),\n  value: T.Union([\n    T.String(),\n    T.Number(),\n    T.Boolean(),\n    T.Array(T.Union([T.String(), T.Number()])),\n  ]),\n});\n\nexport interface SearchParams {\n  cursor?: string;\n  limit: number;\n  search?: string;\n  sort?: {\n    field: string;\n    direction: \"asc\" | \"desc\";\n  };\n}\n\nexport const SearchParamsSchema = T.Object({\n  cursor: T.Optional(T.String()),\n  limit: T.Number(),\n  search: T.Optional(T.String()),\n  sort: T.Optional(\n    T.Object({\n      field: T.String(),\n      direction: T.Union([T.Literal(\"asc\"), T.Literal(\"desc\")]),\n    })\n  ),\n});\n\nexport type SearchQueryField = {\n  name: string;\n  comparator?: \"and\" | \"or\";\n  is?: string | number | boolean;\n  contains?: string;\n  isOneOf?: string[];\n  isLikeOneOf?: string[];\n  isGreaterThan?: string | number;\n  isLessThan?: string | number;\n  isBetween?: [string | number, string | number];\n  isNull?: boolean;\n};\n\nexport type OrderBy<T> = {\n  key: Exclude<keyof T, symbol>;\n  order: \"asc\" | \"desc\";\n};\n\nexport type SearchQuery<TSortable = Record<string, unknown>> = {\n  fields?: SearchQueryField[];\n  offset?: number;\n  limit?: number;\n  orderBy?: string | OrderBy<TSortable>;\n};\n\nexport type SearchQueryResult<T> = {\n  results: T[];\n  total: number;\n  offset?: number;\n  limit: number;\n};\n\nexport const encodeSearchQuery = <TSortable>(\n  fields: Required<SearchQuery<TSortable>>[\"fields\"]\n): Record<string, string> =>\n  fields.reduce(\n    (\n      acc,\n      {\n        name,\n        comparator,\n        is,\n        isNull,\n        isOneOf,\n        isLikeOneOf,\n        contains,\n        isGreaterThan,\n        isLessThan,\n        isBetween,\n      }\n    ) => {\n      if (typeof is !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:${is}` : is,\n        };\n      }\n      if (typeof isNull !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:!${isNull}` : `!${isNull}`,\n        };\n      }\n      if (typeof isOneOf !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:${isOneOf.join(\",\")}`\n            : isOneOf.join(\",\"),\n        };\n      }\n\n      if (typeof contains !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:%${contains}%` : `%${contains}%`,\n        };\n      }\n\n      if (typeof isLikeOneOf !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:${isLikeOneOf.map((v) => `%${v}%`).join(\",\")}`\n            : isLikeOneOf.map((v) => `%${v}%`).join(\",\"),\n        };\n      }\n\n      if (typeof isGreaterThan !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:>${isGreaterThan}`\n            : `>${isGreaterThan}`,\n        };\n      }\n\n      if (typeof isLessThan !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:<${isLessThan}`\n            : `<${isLessThan}`,\n        };\n      }\n\n      if (typeof isBetween !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:>${isBetween[0]},<${isBetween[1]}`\n            : `>${isBetween[0]},<${isBetween[1]}`,\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\nfunction toNumberIfPossible(value: string | number): number | string {\n  if (typeof value === \"string\") {\n    const parsed = parseInt(value, 10);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return value as number;\n}\n\nexport function decodeSearchQuery(\n  query: Record<string, string>\n): SearchQueryField[] {\n  return Object.entries(query).reduce((acc, [name, val]) => {\n    const [comparatorStr, valuesStr] = val.includes(\":\")\n      ? val.split(\":\")\n      : [\"and\", val];\n\n    const comparator = comparatorStr === \"and\" ? \"and\" : \"or\";\n    const hasMany = valuesStr.includes(\",\");\n    const values = hasMany ? valuesStr.split(\",\") : [valuesStr];\n\n    // Is Between\n    if (\n      values.length === 2 &&\n      values[0].startsWith(\">\") &&\n      values[1].startsWith(\"<\")\n    ) {\n      acc.push({\n        name,\n        comparator,\n        isBetween: [\n          toNumberIfPossible(values[0].slice(1)),\n          toNumberIfPossible(values[1].slice(1)),\n        ],\n      });\n\n      // Is Less Than\n    } else if (valuesStr.startsWith(\"<\")) {\n      const [, value] = valuesStr.split(\"<\");\n      acc.push({\n        name,\n        comparator,\n        isLessThan: toNumberIfPossible(value),\n      });\n\n      // Is Greater Than\n    } else if (valuesStr.startsWith(\">\")) {\n      const [, value] = valuesStr.split(\">\");\n      acc.push({\n        name,\n        comparator,\n        isGreaterThan: toNumberIfPossible(value),\n      });\n\n      // Is Like One Of\n    } else if (\n      values.length > 1 &&\n      valuesStr.startsWith(\"%\") &&\n      valuesStr.endsWith(\"%\")\n    ) {\n      acc.push({\n        name,\n        comparator,\n        isLikeOneOf: values.map((v) => v.slice(1, -1)),\n      });\n\n      // Contains\n    } else if (valuesStr.startsWith(\"%\") && valuesStr.endsWith(\"%\")) {\n      acc.push({\n        name,\n        comparator,\n        contains: valuesStr.slice(1, -1),\n      });\n\n      // Is One Of\n    } else if (values.length > 1) {\n      acc.push({\n        name,\n        comparator,\n        isOneOf: values,\n      });\n      // Is Null\n    } else if (values.length === 1 && valuesStr.startsWith(\"!\")) {\n      acc.push({\n        name,\n        comparator,\n        isNull: valuesStr === \"!true\",\n      });\n      // Is\n    } else {\n      acc.push({\n        name,\n        comparator,\n        is: toNumberIfPossible(valuesStr),\n      });\n    }\n\n    return acc;\n  }, [] as SearchQueryField[]);\n}\n","import { TSchema } from \"./typebox\";\n\nexport interface ResourceOptions<\n  TResp extends TSchema,\n  TParams extends TSchema,\n> {\n  name: string;\n  resource: string;\n  schema: TResp;\n  params: TParams;\n}\n\nexport class Resource<TResp extends TSchema, TParams extends TSchema> {\n  name: string;\n  resource: string;\n  schema: TResp;\n  params: TParams;\n\n  constructor(options: ResourceOptions<TResp, TParams>) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.schema = options.schema;\n    this.params = options.params;\n  }\n}\n\nexport function createResource<TResp extends TSchema, TParams extends TSchema>(\n  options: ResourceOptions<TResp, TParams>\n): Resource<TResp, TParams> {\n  return new Resource(options);\n}\n","import debug from \"debug\";\nimport { stringify } from \"qs\";\nimport { MutableRefObject } from \"react\";\n\nimport {\n  BadRequestError,\n  convertQueryParamKeysToKabobCase,\n  InternalServerError,\n  isBadRequestError,\n  isInternalServerError,\n  isNotFoundError,\n  isUnauthorizedError,\n  NotFoundError,\n  Static,\n  TSchema,\n  UnauthorizedError,\n} from \"../common\";\nimport { PaginationParams } from \"./model\";\n\nconst log = debug(\"axiom:request\");\n\nexport type QueryParameters = Record<\n  string,\n  string | number | boolean | undefined\n>;\n\ninterface APIRequestParams<T> {\n  method?: string;\n  headers?: Record<string, string>;\n  query?: QueryParameters;\n  body?: T;\n  token?: string | null;\n}\n\nexport function paramsForQuery<TParams extends Record<string, string | number>>(\n  url: string,\n  params: TParams = {} as TParams\n) {\n  return Object.fromEntries(\n    Object.entries(params).filter(([key]) => !url.includes(`:${key}`))\n  );\n}\n\nexport function buildResourcePath<\n  TParams extends Record<string, string | number>,\n>(baseUrl: string, resource: string, params: TParams = {} as TParams) {\n  const cleanBaseUrl = baseUrl.endsWith(\"/\")\n    ? baseUrl.substr(0, baseUrl.length - 1)\n    : baseUrl;\n  const cleanResource = resource.startsWith(\"/\")\n    ? resource.substr(1)\n    : resource;\n  const url = `${cleanBaseUrl}/${cleanResource}`;\n  const urlWithParams = Object.entries(params).reduce((acc, [key, val]) => {\n    if (typeof val !== \"undefined\" && typeof val !== \"object\") {\n      return acc.replace(`:${key}`, val.toString());\n    }\n    return acc;\n  }, url);\n  return urlWithParams;\n}\n\nexport async function request<TRequestBody, TResponseBody = TRequestBody>(\n  url: string,\n  {\n    method = \"get\",\n    headers = {},\n    query = {},\n    body,\n    token,\n  }: APIRequestParams<TRequestBody> = {}\n): Promise<[TResponseBody, PaginationParams & { total: number }]> {\n  const cleanedQuery = Object.entries(query).reduce((acc, [key, val]) => {\n    if (!val) {\n      return acc;\n    }\n    return { ...acc, [key]: val };\n  }, {});\n  const queryString = stringify(cleanedQuery);\n  const uri = `${url}${queryString ? `?${queryString}` : \"\"}`;\n\n  const requestHeaders = {\n    \"Content-Type\": \"application/json\",\n    ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    ...headers,\n  };\n\n  log(`${method} ${uri}`, { body, headers: requestHeaders, token });\n  const resp = await fetch(uri, {\n    method,\n    headers: requestHeaders,\n    body: [\"post\", \"put\"].includes(method.toLowerCase())\n      ? JSON.stringify(body)\n      : undefined,\n  });\n\n  if (!resp.ok) {\n    const error = await resp.json();\n    if (isBadRequestError(error)) {\n      throw new BadRequestError(error.message, error.fields);\n    } else if (isNotFoundError(error)) {\n      throw new NotFoundError(error.message);\n    } else if (isUnauthorizedError(error)) {\n      throw new UnauthorizedError(error.message);\n    } else if (isInternalServerError(error)) {\n      throw new InternalServerError(error.message);\n    } else {\n      throw new InternalServerError(\"An unknown error occurred\");\n    }\n  }\n\n  log(`${method} ${uri} - ${resp.status} ${resp.statusText}`);\n\n  const responseHeaders: Record<string, string> = {};\n  for (const pair of resp.headers.entries()) {\n    const [name, value] = pair;\n    responseHeaders[name.toLowerCase()] = value;\n  }\n\n  const [offset, limit, total, next, prev] = [\n    responseHeaders[\"X-Pagination-Offset\".toLowerCase()],\n    responseHeaders[\"X-Pagination-Limit\".toLowerCase()],\n    responseHeaders[\"X-Pagination-Total\".toLowerCase()],\n    responseHeaders[\"X-Pagination-Next\".toLowerCase()],\n    responseHeaders[\"X-Pagination-Prev\".toLowerCase()],\n  ];\n\n  const respBody = (await resp.json()) as TResponseBody;\n\n  return [\n    respBody,\n    {\n      offset: parseInt(offset, 10),\n      limit: parseInt(limit, 10),\n      total: parseInt(total, 10),\n      next,\n      prev,\n    },\n  ];\n}\n\ntype RequestCreatorOptions = {\n  resourcePath: string;\n  token: MutableRefObject<string | null>;\n  headers?: Record<string, string>;\n};\n\nexport function createSearchRequestFn<T extends TSchema>({\n  resourcePath,\n  token,\n  headers,\n  ...options\n}: RequestCreatorOptions) {\n  return async function search({\n    offset = 0,\n    limit = 999,\n    orderBy,\n    knownCursors,\n    next: nextParam,\n    prev: prevParam,\n    ...query\n  }: PaginationParams & QueryParameters = {}) {\n    const [results, { total, next, prev }] = await request<Static<T>[]>(\n      resourcePath,\n      {\n        method: \"get\",\n        query: convertQueryParamKeysToKabobCase(query),\n        token: token.current,\n        headers: {\n          \"X-Pagination-Offset\": offset.toString(),\n          \"X-Pagination-Limit\": limit.toString(),\n          ...(knownCursors\n            ? { \"X-Pagination-KnownCursors\": knownCursors }\n            : {}),\n          ...(nextParam ? { \"X-Pagination-Next\": nextParam } : {}),\n          ...(prevParam ? { \"X-Pagination-Prev\": prevParam } : {}),\n          ...(orderBy ? { \"X-Pagination-OrderBy\": orderBy } : {}),\n          ...headers,\n        },\n        ...options,\n      }\n    );\n    return { results, total, offset, limit, orderBy, next, prev };\n  };\n}\n\nexport function createCallRequestFn<T extends TSchema>({\n  resourcePath,\n  token,\n  ...options\n}: RequestCreatorOptions) {\n  return async function call(params: QueryParameters) {\n    const [resp] = await request<unknown, Static<T>>(resourcePath, {\n      token: token.current,\n      query: params,\n      ...options,\n    });\n    return resp;\n  };\n}\n\nexport function createGetRequestFn<T extends TSchema>({\n  resourcePath,\n  token,\n  ...options\n}: RequestCreatorOptions) {\n  return async function get(id: string | number, query: QueryParameters = {}) {\n    const [resp] = await request<Static<T>>(`${resourcePath}/${id}`, {\n      method: \"get\",\n      token: token.current,\n      query: convertQueryParamKeysToKabobCase(query),\n      ...options,\n    });\n    return resp;\n  };\n}\n\nexport function createCreateRequestFn<T extends TSchema>({\n  resourcePath,\n  token,\n  ...options\n}: RequestCreatorOptions) {\n  return async function create(body: Static<T>) {\n    const [resp] = await request<Static<T>>(resourcePath, {\n      method: \"post\",\n      body,\n      token: token.current,\n      ...options,\n    });\n    return resp;\n  };\n}\n\nexport function createUpdateRequestFn<T extends TSchema>({\n  resourcePath,\n  token,\n  ...options\n}: RequestCreatorOptions) {\n  return async function update(id: string | number, body: Static<T>) {\n    const [resp] = await request<Static<T>>(`${resourcePath}/${id}`, {\n      method: \"put\",\n      body,\n      token: token.current,\n      ...options,\n    });\n    return resp;\n  };\n}\n\nexport function createRemoveRequestFn<T extends TSchema>({\n  resourcePath,\n  token,\n  ...options\n}: RequestCreatorOptions) {\n  return async function remove(id: string | number, body: Static<T>) {\n    await request<Static<T>, void>(`${resourcePath}/${id}`, {\n      method: \"delete\",\n      body,\n      token: token.current,\n      ...options,\n    });\n    return body;\n  };\n}\n","import {\n  QueryClient,\n  UseMutationOptions,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { MutableRefObject, createRef } from \"react\";\n\nimport { Procedure } from \"../common/procedure\";\nimport { buildResourcePath, paramsForQuery, request } from \"./request\";\nimport { Static, TSchema, convertQueryParamKeysToKabobCase } from \"../common\";\n\nexport interface ReactProcedureOptions<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  procedure: Procedure<TParams, TQuery, TResult>;\n}\n\ninterface ProcedureBindOptions {\n  client: QueryClient;\n  baseUrl: string;\n  token: MutableRefObject<string | null>;\n}\n\nexport class ReactProcedure<TProcedure extends Procedure<any, any, any>> {\n  baseUrl: string;\n  token: MutableRefObject<string | null>;\n  client?: QueryClient;\n  procedure: Procedure<\n    TProcedure[\"params\"],\n    TProcedure[\"query\"],\n    TProcedure[\"result\"]\n  >;\n\n  constructor(\n    options: ReactProcedureOptions<\n      TProcedure[\"params\"],\n      TProcedure[\"query\"],\n      TProcedure[\"result\"]\n    >\n  ) {\n    this.procedure = options.procedure;\n    this.token = createRef<string | null>();\n    this.baseUrl = \"\";\n  }\n\n  bind({ client, baseUrl, token }: ProcedureBindOptions) {\n    this.baseUrl = baseUrl;\n    this.client = client;\n    this.token = token;\n    return this;\n  }\n\n  run(\n    options: UseMutationOptions<\n      Static<TProcedure[\"result\"]>,\n      Error,\n      Static<TProcedure[\"params\"]>\n    > = {}\n  ) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const mutation = useMutation({\n      mutationKey: [this.procedure.name],\n      mutationFn: async (\n        params: Static<TProcedure[\"params\"]> & Static<TProcedure[\"query\"]>\n      ): Promise<Static<TProcedure[\"result\"]>> => {\n        const url = buildResourcePath(\n          this.baseUrl,\n          this.procedure.resource,\n          params\n        );\n        const paramsForQueryString = paramsForQuery(\n          this.procedure.resource,\n          this.procedure.method.toLowerCase() === \"get\" ? params : {}\n        );\n        const [resp] = await request<Static<TProcedure[\"result\"]>>(url, {\n          method: this.procedure.method,\n          body:\n            this.procedure.method.toLowerCase() === \"get\" ? undefined : params,\n          token: this.token.current,\n          query: convertQueryParamKeysToKabobCase(paramsForQueryString),\n        });\n        return resp;\n      },\n      ...options,\n    });\n    return {\n      ...mutation,\n      mutate: mutation.mutate,\n      run: mutation.mutateAsync,\n    };\n  }\n}\n","import { buildResourcePath, request } from \"./request\";\n\nimport { QueryClient, useQuery } from \"@tanstack/react-query\";\nimport { createRef, MutableRefObject } from \"react\";\nimport { Resource, Static, TSchema } from \"../common\";\n\ninterface ReactResourceOptions<TResp extends TSchema, TParams extends TSchema> {\n  resource: Resource<TResp, TParams>;\n}\n\ninterface ReactResourceBindOptions {\n  baseUrl: string;\n  client: QueryClient;\n  token: MutableRefObject<string | null>;\n}\n\ninterface ResourceGetOptions<\n  TResp extends TSchema,\n  TParams extends TSchema,\n  TTransformed = Static<TResp>,\n> {\n  params?: Static<TParams>;\n  select?: (data: Static<TResp>) => TTransformed;\n}\n\nexport class ReactResource<TResource extends Resource<any, any>> {\n  resource: Resource<TResource[\"schema\"], TResource[\"params\"]>;\n  baseUrl?: string;\n  token?: MutableRefObject<string | null>;\n  client?: QueryClient;\n\n  constructor(\n    options: ReactResourceOptions<TResource[\"schema\"], TResource[\"params\"]>\n  ) {\n    this.resource = options.resource;\n    this.token = createRef<string | null>();\n    this.baseUrl = \"\";\n  }\n\n  bind({ client, baseUrl, token }: ReactResourceBindOptions) {\n    this.baseUrl = baseUrl;\n    this.client = client;\n    this.token = token;\n    return this;\n  }\n\n  get(\n    params: Static<TResource[\"params\"]>,\n    options?: ResourceGetOptions<TResource[\"schema\"], TResource[\"params\"]>\n  ) {\n    return useQuery({\n      queryKey: [this.resource.resource, params],\n      queryFn: async () => {\n        const [data] = await request<TResource[\"schema\"]>(\n          buildResourcePath(this.baseUrl ?? \"\", this.resource.resource, params),\n          {\n            token: this.token?.current,\n          }\n        );\n        return data;\n      },\n      refetchOnMount: true,\n      retryOnMount: true,\n      refetchOnReconnect: true,\n      refetchOnWindowFocus: true,\n      ...options,\n    });\n  }\n}\n","import { QueryClient } from \"@tanstack/react-query\";\nimport { MutableRefObject } from \"react\";\n\nimport { Model, Procedure, Resource, TSchema } from \"../common\";\nimport { ReactModel } from \"./model\";\nimport { ReactProcedure } from \"./procedure\";\nimport { ReactResource } from \"./resource\";\n\nexport type ModelMap<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  >,\n> = {\n  [K in keyof M]: M[K];\n};\n\nexport type ReactModelMap<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any, TSchema>\n  >,\n> = {\n  [K in keyof M]: ReactModel<\n    M[K],\n    M[K][\"schemas\"][\"model\"],\n    M[K][\"schemas\"][\"create\"],\n    M[K][\"schemas\"][\"update\"],\n    M[K][\"transformer\"],\n    M[K][\"sortableBy\"]\n  >;\n};\n\nexport type ProcedureMap<\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n> = {\n  [K in keyof P]: P[K];\n};\n\nexport type ReactProcedureMap<\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n> = {\n  [K in keyof P]: ReactProcedure<P[K]>;\n};\n\nexport type ResourceMap<P extends Record<string, Resource<TSchema, TSchema>>> =\n  {\n    [K in keyof P]: P[K];\n  };\n\nexport type ReactResourceMap<\n  R extends Record<string, Resource<TSchema, TSchema>>,\n> = {\n  [K in keyof R]: ReactResource<R[K]>;\n};\n\ninterface CreateApiOptions<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  >,\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n  R extends Record<string, Resource<TSchema, TSchema>>,\n> {\n  client: QueryClient;\n  baseUrl: string;\n  models: M;\n  fns: P;\n  resources: R;\n  token: MutableRefObject<string | null>;\n}\n\nexport function createApi<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any, TSchema>\n  >,\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n  R extends Record<string, Resource<TSchema, TSchema>>,\n>({\n  models,\n  fns,\n  resources,\n  client,\n  baseUrl,\n  token,\n}: CreateApiOptions<M, P, R>): ReactModelMap<M> &\n  ReactProcedureMap<P> &\n  ReactResourceMap<R> {\n  return {\n    ...Object.keys(models).reduce(\n      (acc, key) => ({\n        ...acc,\n        [key as keyof M]: new ReactModel<\n          M[keyof M],\n          M[keyof M][\"schemas\"][\"model\"],\n          M[keyof M][\"schemas\"][\"create\"],\n          M[keyof M][\"schemas\"][\"update\"],\n          M[keyof M][\"transformer\"],\n          M[keyof M][\"sortableBy\"]\n        >({\n          baseUrl,\n          model: models[key as keyof M],\n          _unstable_offlineModel: models[key as keyof M]._unstable_offlineModel,\n        }).bind({\n          client,\n          baseUrl,\n          token,\n        }),\n      }),\n      {} as ReactModelMap<M>\n    ),\n    ...Object.keys(fns).reduce(\n      (acc, key) => ({\n        ...acc,\n        [key as keyof P]: new ReactProcedure({\n          procedure: fns[key as keyof P],\n        }).bind({\n          client,\n          baseUrl,\n          token,\n        }),\n      }),\n      {} as ReactProcedureMap<P>\n    ),\n    ...Object.keys(resources).reduce(\n      (acc, key) => ({\n        ...acc,\n        [key as keyof R]: new ReactResource<R[keyof R]>({\n          resource: resources[key as keyof R],\n        }).bind({\n          client,\n          baseUrl,\n          token,\n        }),\n      }),\n      {} as ReactResourceMap<R>\n    ),\n  };\n}\n","import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useRef,\n} from \"react\";\n\nimport { Model, Procedure, Resource, TSchema } from \"../common\";\nimport {\n  createApi,\n  ReactModelMap,\n  ReactProcedureMap,\n  ReactResourceMap,\n} from \"./api\";\n\nconst emptyModelMap: Record<\n  string,\n  Model<any, any, any, any, any, any, any>\n> = {};\n\nconst emptyProcedureMap: Record<string, Procedure<any, any, any>> = {};\n\nconst emptyResourceMap: Record<string, Resource<any, any>> = {};\n\ntype ApiContextData<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  >,\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n  R extends Record<string, Resource<TSchema, TSchema>>,\n> = {\n  api: ReactModelMap<M> & ReactProcedureMap<P> & ReactResourceMap<R>;\n};\n\nconst ApiContext = createContext<ApiContextData<\n  Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  >,\n  Record<string, Procedure<TSchema, TSchema, TSchema>>,\n  Record<string, Resource<TSchema, TSchema>>\n> | null>(null);\n\ntype ApiProviderProps<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  >,\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n  R extends Record<string, Resource<TSchema, TSchema>>,\n> = {\n  models?: M;\n  fns?: P;\n  resources?: R;\n  baseUrl: string;\n  client?: QueryClient;\n  token?: string;\n};\n\nfunction ApiProvider<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  >,\n  P extends Record<string, Procedure<TSchema, TSchema, TSchema>>,\n  R extends Record<string, Resource<TSchema, TSchema>>,\n>({\n  client = new QueryClient(),\n  baseUrl,\n  models = {} as M,\n  fns = {} as P,\n  resources = {} as R,\n  children,\n  token,\n}: PropsWithChildren<ApiProviderProps<M, P, R>>) {\n  const tokenRef = useRef<string | null>(token ?? null);\n  tokenRef.current = token ?? null;\n  const api = createApi({\n    client,\n    models,\n    fns,\n    resources,\n    baseUrl,\n    token: tokenRef,\n  });\n\n  return (\n    <QueryClientProvider client={client}>\n      <ApiContext.Provider value={{ api }}>{children}</ApiContext.Provider>\n    </QueryClientProvider>\n  );\n}\n\nexport function createApiProvider<\n  M extends Record<string, Model<any, any, any, any, any, any, any>>,\n  P extends Record<string, Procedure<any, any, any>>,\n  R extends Record<string, Resource<any, any>>,\n>({\n  models = {} as M,\n  fns = {} as P,\n  resources = {} as R,\n}: {\n  models?: M;\n  fns?: P;\n  resources?: R;\n}) {\n  return function ApiProviderHook(\n    props: PropsWithChildren<ApiProviderProps<M, P, R>>\n  ) {\n    return (\n      <ApiProvider {...props} models={models} fns={fns} resources={resources} />\n    );\n  };\n}\n\nfunction useApi<\n  M extends Record<\n    string,\n    Model<TSchema, TSchema, TSchema, TSchema, TSchema, TSchema, any>\n  > = typeof emptyModelMap,\n  P extends Record<\n    string,\n    Procedure<TSchema, TSchema, TSchema>\n  > = typeof emptyProcedureMap,\n  R extends Record<\n    string,\n    Resource<TSchema, TSchema>\n  > = typeof emptyResourceMap,\n>() {\n  const context = useContext<ApiContextData<M, P, R> | null>(\n    ApiContext as unknown as React.Context<ApiContextData<M, P, R> | null>\n  );\n  if (!context) {\n    throw new Error(\n      \"Axiom's useApi hook must be used within a child of ApiProvider.\"\n    );\n  }\n\n  return context.api;\n}\n\nexport function createUseApiHook<\n  M extends Record<string, Model<any, any, any, any, any, any, any>>,\n  P extends Record<string, Procedure<any, any, any>>,\n  R extends Record<string, Resource<any, any>>,\n  // eslint-disable-next-line no-empty-pattern\n>({}: { models?: M; fns?: P; resources?: R }) {\n  return function useApiHook() {\n    return useApi<M, P, R>();\n  };\n}\n"],"mappings":"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","names":["value","ErrorType","debug","get","fields","import_react_query","import_react","import_react_query","import_react","import_react_query","import_react"]}