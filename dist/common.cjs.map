{"version":3,"sources":["../src/common/index.ts","../src/common/typebox.ts","../src/common/model.ts","../src/common/procedure.ts","../src/common/utils.ts","../src/common/errors.ts","../src/index.ts","../src/common/search.ts","../src/common/resource.ts"],"sourcesContent":["export * from \"./typebox\";\nexport * from \"./model\";\nexport * from \"./procedure\";\nexport * from \"./utils\";\nexport * from \"./types\";\nexport * from \"./errors\";\nexport * from \"./search\";\nexport * from \"./resource\";\n","export * from \"@sinclair/typebox\";\nexport { Type as T, TypeGuard } from \"@sinclair/typebox\";\nexport { Value } from \"@sinclair/typebox/value\";\nexport { TypeCompiler } from \"@sinclair/typebox/compiler\";\nexport { TypeSystem } from \"@sinclair/typebox/system\";\n","import { Static, T, TObject, TSchema } from \"../common\";\n\nexport type ModelOptions<\n  TModel extends TSchema,\n  TCreate extends TSchema,\n  TUpdate extends TSchema,\n  TDelete extends TSchema,\n  TQuery extends TSchema,\n  TPath extends TSchema,\n  TTransform extends (serialized: Static<TModel>) => any,\n  TSortable extends TSchema,\n> = {\n  name: string;\n  resource: string;\n  idKey: Exclude<keyof Static<TModel>, symbol>;\n  model: TModel;\n  create?: TCreate;\n  update?: TUpdate;\n  del?: TDelete;\n  query?: TQuery;\n  path?: TPath;\n  transformer: TTransform;\n  sortableBy?: TSortable;\n  _unstable_offlineModel?: boolean;\n  infiniteSearch?: {\n    enabled: boolean;\n    defaultLimit?: number;\n  };\n};\n\nexport class Model<\n  TModel extends TSchema,\n  TCreate extends TSchema = TModel,\n  TUpdate extends TSchema = TModel,\n  TDelete extends TSchema = TObject,\n  TQuery extends TSchema = TObject,\n  TPath extends TSchema = TObject,\n  TTransform extends (serialized: Static<TModel>) => any = (\n    m: Static<TModel>\n  ) => typeof m,\n  TSortable extends TSchema = TModel,\n> {\n  name: string;\n  resource: string;\n  idKey: Exclude<keyof Static<TModel>, symbol>;\n  schemas: {\n    model: TModel;\n    create: TCreate;\n    update: TUpdate;\n    del: TDelete;\n    query: TQuery;\n    path: TPath;\n  };\n  transformer: TTransform;\n  sortableBy: TSortable;\n  _unstable_offlineModel?: boolean;\n  infiniteSearch?: {\n    enabled: boolean;\n    defaultLimit: number;\n  };\n\n  constructor(\n    options: ModelOptions<\n      TModel,\n      TCreate,\n      TUpdate,\n      TDelete,\n      TQuery,\n      TPath,\n      TTransform,\n      TSortable\n    >\n  ) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.idKey = options.idKey;\n    this.schemas = {\n      model: options.model,\n      create: options.create ?? (options.model as unknown as TCreate),\n      update: options.update ?? (options.model as unknown as TUpdate),\n      del: options.del ?? (T.Object({}) as unknown as TDelete),\n      path: options.path ?? (T.Object({}) as unknown as TPath),\n      query: options.query ?? (T.Object({}) as unknown as TQuery),\n    };\n    this.transformer = options.transformer;\n    this.sortableBy =\n      options.sortableBy || (options.model as unknown as TSortable);\n    this._unstable_offlineModel = options._unstable_offlineModel ?? false;\n    this.infiniteSearch = options.infiniteSearch\n      ? {\n          enabled: options.infiniteSearch.enabled,\n          defaultLimit: options.infiniteSearch.defaultLimit ?? 50,\n        }\n      : undefined;\n  }\n\n  getSearchResponseType(): TSchema {\n    return T.Object({\n      results: T.Array(this.schemas.model),\n      nextCursor: T.Optional(T.String()),\n      total: T.Number(),\n      metadata: T.Object({\n        currentResults: T.Number(),\n        historicalResults: T.Number(),\n        timePeriodCovered: T.Tuple([T.String(), T.String()]),\n      }),\n    });\n  }\n\n  getSearchParamsType(): TSchema {\n    return T.Object({\n      cursor: T.Optional(T.String()),\n      limit: T.Optional(T.Number()),\n      search: T.Optional(T.String()),\n      filters: T.Optional(\n        T.Array(\n          T.Object({\n            field: T.String(),\n            operator: T.Union([\n              T.Literal(\"eq\"),\n              T.Literal(\"contains\"),\n              T.Literal(\"gt\"),\n              T.Literal(\"lt\"),\n              T.Literal(\"between\"),\n            ]),\n            value: T.Union([\n              T.String(),\n              T.Number(),\n              T.Boolean(),\n              T.Array(T.Union([T.String(), T.Number()])),\n            ]),\n          })\n        )\n      ),\n      sort: T.Optional(\n        T.Object({\n          field: T.String(),\n          direction: T.Union([T.Literal(\"asc\"), T.Literal(\"desc\")]),\n        })\n      ),\n    });\n  }\n}\n\nexport function createModel<\n  TModel extends TSchema,\n  TCreate extends TSchema,\n  TUpdate extends TSchema,\n  TDelete extends TSchema,\n  TQuery extends TSchema,\n  TPath extends TSchema,\n  TTransformer extends (serialized: Static<TModel>) => any,\n  TSortable extends TSchema = TModel,\n>(\n  options: ModelOptions<\n    TModel,\n    TCreate,\n    TUpdate,\n    TDelete,\n    TQuery,\n    TPath,\n    TTransformer,\n    TSortable\n  >\n) {\n  return new Model<\n    TModel,\n    TCreate,\n    TUpdate,\n    TDelete,\n    TQuery,\n    TPath,\n    TTransformer,\n    TSortable\n  >(options);\n}\n","import { T, TSchema } from \"../common\";\n\nexport interface ProcedureOptions<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  name: string;\n  resource: string;\n  params: TParams;\n  result: TResult;\n  query?: TQuery;\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n}\n\nexport class Procedure<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n> {\n  name: string;\n  resource: string;\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" = \"GET\";\n  params: TParams;\n  query: TQuery;\n  result: TResult;\n\n  constructor(options: ProcedureOptions<TParams, TQuery, TResult>) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.params = options.params;\n    this.result = options.result;\n    this.query = options.query ?? (T.Object({}) as unknown as TQuery);\n    this.method = options.method || \"GET\";\n  }\n}\n\nexport function createProcedure<\n  TParams extends TSchema,\n  TQuery extends TSchema,\n  TResult extends TSchema,\n>(options: ProcedureOptions<TParams, TQuery, TResult>) {\n  return new Procedure(options);\n}\n","import { Value, Type, Static, TSchema, TypeGuard, TObject } from \"./typebox\";\nimport { GetFieldType } from \"./types\";\n\nexport function convertQueryParamKeysToKabobCase<T extends object>(obj: T) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, val]) => [key.replace(/0/g, \".\"), val])\n  );\n}\n\nexport function convertQueryParamKeysFromKabobCase<T extends object>(obj: T) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, val]) => [key.replace(/,/g, \"-\"), val])\n  );\n}\n\nexport function getValue<\n  TData,\n  TPath extends string,\n  TDefault = GetFieldType<TData, TPath>,\n>(\n  data: TData,\n  path: TPath,\n  defaultValue?: TDefault\n): GetFieldType<TData, TPath> | TDefault {\n  const value = path\n    .split(/[.[\\]]/)\n    .filter(Boolean)\n    .reduce<GetFieldType<TData, TPath>>(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (value, key) => (value as any)?.[key],\n      data as any\n    );\n\n  return value !== undefined ? value : (defaultValue as TDefault);\n}\n\nexport function Nullable<T extends TSchema>(schema: T) {\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true });\n}\n\nexport function noAdditionalPropertiesInSchema<T extends TSchema>(\n  schema: T\n): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: noAdditionalPropertiesInSchema(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      additionalProperties: false,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          noAdditionalPropertiesInSchema(value),\n        ])\n      ),\n    };\n  }\n  return schema;\n}\n\nexport function withDefaultsForStringFormats<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withDefaultsForStringFormats(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withDefaultsForStringFormats(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsString(schema) && typeof schema.format !== \"undefined\") {\n    return {\n      ...schema,\n      default: \"\",\n    };\n  }\n  return schema;\n}\n\nexport function withNoStringFormats<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withNoStringFormats(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withNoStringFormats(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsString(schema) && typeof schema.format !== \"undefined\") {\n    return {\n      ...schema,\n      format: undefined,\n    };\n  }\n  return schema;\n}\n\nexport function withNoEnumValues<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withNoEnumValues(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties)\n          .filter(([, value]) => {\n            return !TypeGuard.IsUnion(value);\n          })\n          .map(([key, value]) => [key, withNoEnumValues(value)])\n      ),\n    };\n  }\n  return schema;\n}\n\nexport function withDatesAsDateTimeStrings<T extends TSchema>(schema: T): T {\n  if (TypeGuard.IsArray(schema)) {\n    return { ...schema, items: withDatesAsDateTimeStrings(schema.items) };\n  }\n  if (TypeGuard.IsObject(schema)) {\n    return {\n      ...schema,\n      properties: Object.fromEntries(\n        Object.entries(schema.properties).map(([key, value]) => [\n          key,\n          withDatesAsDateTimeStrings(value),\n        ])\n      ),\n    };\n  }\n  if (TypeGuard.IsDate(schema)) {\n    return {\n      ...schema,\n      type: \"string\",\n      format: \"date-time\",\n    };\n  }\n  return schema;\n}\n\nexport function noEmptyStringValues<T extends object>(obj: T): Partial<T> {\n  return Object.entries(obj).reduce((acc, [key, val]) => {\n    if (val !== \"\") {\n      return { ...acc, [key]: val };\n    }\n    return acc;\n  }, {} as Partial<T>);\n}\n\nexport function noAdditionalProperties<T, I>(schema: T, input: I): I {\n  if (TypeGuard.IsArray(schema) && Array.isArray(input)) {\n    return input.map(\n      (item) => noAdditionalProperties(schema.items, item) as unknown as T\n    ) as I;\n  }\n  if (\n    TypeGuard.IsObject(schema) &&\n    typeof input === \"object\" &&\n    input !== null\n  ) {\n    const prunedInput: Partial<I> = {};\n    for (const [key, value] of Object.entries(input)) {\n      if (key in schema.properties) {\n        prunedInput[key as keyof I] = noAdditionalProperties(\n          schema.properties[key],\n          value\n        );\n      }\n    }\n    return prunedInput as I;\n  }\n  return input;\n}\n\nexport function shallowSchemaProperties<T extends TObject>(schema: T) {\n  return {\n    ...schema,\n    properties: Object.fromEntries(\n      Object.entries(schema.properties).filter(\n        ([, prop]) => !TypeGuard.IsArray(prop) && !TypeGuard.IsObject(prop)\n      )\n    ),\n  };\n}\n\nexport function undefinedToNull<T extends object>(input: T) {\n  return Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [\n      key,\n      value === undefined ? null : value,\n    ])\n  );\n}\n\nexport function trueFalseStringsToBoolean<T extends object>(input: T) {\n  return Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [\n      key,\n      value === \"true\" ? true : value === \"false\" ? false : value,\n    ])\n  );\n}\n\nexport function cast<T extends TSchema>(schema: T, value: unknown) {\n  return Value.Cast(schema, value);\n}\n","import { CustomError } from \"ts-custom-error\";\n\nexport enum ErrorType {\n  // 400\n  BadRequest = \"BadRequest\",\n  // 401\n  Unauthorized = \"Unauthorized\",\n  // 403\n  Forbidden = \"Forbidden\",\n  // 404\n  NotFound = \"NotFound\",\n  // 500\n  InternalServerError = \"InternalServerError\",\n}\n\nexport class APIError extends CustomError {\n  type: ErrorType;\n  status: number;\n  errors: Record<string, unknown>;\n  constructor(\n    status: number,\n    message: string,\n    errors: Record<string, string> = {}\n  ) {\n    super(message);\n    this.type = ErrorType.InternalServerError;\n    this.status = status;\n    this.errors = errors;\n  }\n}\n\nexport function isAPIError(error: unknown): error is APIError {\n  return (\n    !!error &&\n    typeof error === \"object\" &&\n    \"status\" in error &&\n    typeof error.status === \"number\"\n  );\n}\n\nexport class BadRequestError extends APIError {\n  fields: Record<string, string>;\n  constructor(message?: string, fieldErrors?: Record<string, string>) {\n    super(400, message || \"Bad Request\");\n    this.type = ErrorType.BadRequest;\n    this.fields = fieldErrors || {};\n  }\n}\n\nexport function isBadRequestError(error: APIError): error is BadRequestError {\n  return error.type === ErrorType.BadRequest && error.status === 400;\n}\n\nexport class UnauthorizedError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(401, message || \"Unauthorized\", errors);\n    this.type = ErrorType.Unauthorized;\n  }\n}\n\nexport function isUnauthorizedError(\n  error: APIError\n): error is UnauthorizedError {\n  return error.type === ErrorType.Unauthorized && error.status === 401;\n}\n\nexport class ForbiddenError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(403, message || \"Forbidden\", errors);\n    this.type = ErrorType.Forbidden;\n  }\n}\n\nexport function isForbiddenError(error: APIError): error is ForbiddenError {\n  return error.type === ErrorType.Forbidden && error.status === 403;\n}\n\nexport class NotFoundError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(404, message || \"Not Found\", errors);\n    this.type = ErrorType.NotFound;\n  }\n}\n\nexport function isNotFoundError(error: APIError): error is NotFoundError {\n  return error.type === ErrorType.NotFound && error.status === 404;\n}\n\nexport class InternalServerError extends APIError {\n  constructor(message?: string, errors?: Record<string, string>) {\n    super(500, message || \"Internal Server Error\", errors);\n    this.type = ErrorType.InternalServerError;\n  }\n}\n\nexport function isInternalServerError(\n  error: APIError\n): error is InternalServerError {\n  return error.type === ErrorType.InternalServerError && error.status === 500;\n}\n\nexport const assert = (\n  condition: any,\n  message: string,\n  error = BadRequestError\n) => {\n  if (!condition) {\n    throw new error(message);\n  }\n};\n","export * from \"./common\";\n","import { T } from \"../\";\n\nexport interface SearchMetadata {\n  currentResults: number;\n  historicalResults: number;\n  timePeriodCovered: [string, string];\n}\n\nexport const SearchMetadataSchema = T.Object({\n  currentResults: T.Number(),\n  historicalResults: T.Number(),\n  timePeriodCovered: T.Tuple([T.String(), T.String()]),\n});\n\nexport interface SearchResponse<T> {\n  results: T[];\n  nextCursor?: string;\n  total: number;\n  metadata: SearchMetadata;\n}\n\nexport const SearchResponseSchema = T.Object({\n  results: T.Array(T.Any()),\n  nextCursor: T.Optional(T.String()),\n  total: T.Number(),\n  metadata: SearchMetadataSchema,\n});\n\nexport interface SearchFilter {\n  field: string;\n  operator: \"eq\" | \"contains\" | \"gt\" | \"lt\" | \"between\";\n  value: string | number | boolean | [string | number];\n}\n\nexport const SearchFilterSchema = T.Object({\n  field: T.String(),\n  operator: T.Union([\n    T.Literal(\"eq\"),\n    T.Literal(\"contains\"),\n    T.Literal(\"gt\"),\n    T.Literal(\"lt\"),\n    T.Literal(\"between\"),\n  ]),\n  value: T.Union([\n    T.String(),\n    T.Number(),\n    T.Boolean(),\n    T.Array(T.Union([T.String(), T.Number()])),\n  ]),\n});\n\nexport interface SearchParams {\n  cursor?: string;\n  limit: number;\n  search?: string;\n  sort?: {\n    field: string;\n    direction: \"asc\" | \"desc\";\n  };\n}\n\nexport const SearchParamsSchema = T.Object({\n  cursor: T.Optional(T.String()),\n  limit: T.Number(),\n  search: T.Optional(T.String()),\n  sort: T.Optional(\n    T.Object({\n      field: T.String(),\n      direction: T.Union([T.Literal(\"asc\"), T.Literal(\"desc\")]),\n    })\n  ),\n});\n\nexport type SearchQueryField = {\n  name: string;\n  comparator?: \"and\" | \"or\";\n  is?: string | number | boolean;\n  contains?: string;\n  isOneOf?: string[];\n  isLikeOneOf?: string[];\n  isGreaterThan?: string | number;\n  isLessThan?: string | number;\n  isBetween?: [string | number, string | number];\n  isNull?: boolean;\n};\n\nexport type OrderBy<T> = {\n  key: Exclude<keyof T, symbol>;\n  order: \"asc\" | \"desc\";\n};\n\nexport type SearchQuery<TSortable = Record<string, unknown>> = {\n  fields?: SearchQueryField[];\n  offset?: number;\n  limit?: number;\n  orderBy?: string | OrderBy<TSortable>;\n};\n\nexport type SearchQueryResult<T> = {\n  results: T[];\n  total: number;\n  offset?: number;\n  limit: number;\n};\n\nexport const encodeSearchQuery = <TSortable>(\n  fields: Required<SearchQuery<TSortable>>[\"fields\"]\n): Record<string, string> =>\n  fields.reduce(\n    (\n      acc,\n      {\n        name,\n        comparator,\n        is,\n        isNull,\n        isOneOf,\n        isLikeOneOf,\n        contains,\n        isGreaterThan,\n        isLessThan,\n        isBetween,\n      }\n    ) => {\n      if (typeof is !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:${is}` : is,\n        };\n      }\n      if (typeof isNull !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:!${isNull}` : `!${isNull}`,\n        };\n      }\n      if (typeof isOneOf !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:${isOneOf.join(\",\")}`\n            : isOneOf.join(\",\"),\n        };\n      }\n\n      if (typeof contains !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator ? `${comparator}:%${contains}%` : `%${contains}%`,\n        };\n      }\n\n      if (typeof isLikeOneOf !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:${isLikeOneOf.map((v) => `%${v}%`).join(\",\")}`\n            : isLikeOneOf.map((v) => `%${v}%`).join(\",\"),\n        };\n      }\n\n      if (typeof isGreaterThan !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:>${isGreaterThan}`\n            : `>${isGreaterThan}`,\n        };\n      }\n\n      if (typeof isLessThan !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:<${isLessThan}`\n            : `<${isLessThan}`,\n        };\n      }\n\n      if (typeof isBetween !== \"undefined\") {\n        return {\n          ...acc,\n          [name]: comparator\n            ? `${comparator}:>${isBetween[0]},<${isBetween[1]}`\n            : `>${isBetween[0]},<${isBetween[1]}`,\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\nfunction toNumberIfPossible(value: string | number): number | string {\n  if (typeof value === \"string\") {\n    const parsed = parseInt(value, 10);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return value as number;\n}\n\nexport function decodeSearchQuery(\n  query: Record<string, string>\n): SearchQueryField[] {\n  return Object.entries(query).reduce((acc, [name, val]) => {\n    const [comparatorStr, valuesStr] = val.includes(\":\")\n      ? val.split(\":\")\n      : [\"and\", val];\n\n    const comparator = comparatorStr === \"and\" ? \"and\" : \"or\";\n    const hasMany = valuesStr.includes(\",\");\n    const values = hasMany ? valuesStr.split(\",\") : [valuesStr];\n\n    // Is Between\n    if (\n      values.length === 2 &&\n      values[0].startsWith(\">\") &&\n      values[1].startsWith(\"<\")\n    ) {\n      acc.push({\n        name,\n        comparator,\n        isBetween: [\n          toNumberIfPossible(values[0].slice(1)),\n          toNumberIfPossible(values[1].slice(1)),\n        ],\n      });\n\n      // Is Less Than\n    } else if (valuesStr.startsWith(\"<\")) {\n      const [, value] = valuesStr.split(\"<\");\n      acc.push({\n        name,\n        comparator,\n        isLessThan: toNumberIfPossible(value),\n      });\n\n      // Is Greater Than\n    } else if (valuesStr.startsWith(\">\")) {\n      const [, value] = valuesStr.split(\">\");\n      acc.push({\n        name,\n        comparator,\n        isGreaterThan: toNumberIfPossible(value),\n      });\n\n      // Is Like One Of\n    } else if (\n      values.length > 1 &&\n      valuesStr.startsWith(\"%\") &&\n      valuesStr.endsWith(\"%\")\n    ) {\n      acc.push({\n        name,\n        comparator,\n        isLikeOneOf: values.map((v) => v.slice(1, -1)),\n      });\n\n      // Contains\n    } else if (valuesStr.startsWith(\"%\") && valuesStr.endsWith(\"%\")) {\n      acc.push({\n        name,\n        comparator,\n        contains: valuesStr.slice(1, -1),\n      });\n\n      // Is One Of\n    } else if (values.length > 1) {\n      acc.push({\n        name,\n        comparator,\n        isOneOf: values,\n      });\n      // Is Null\n    } else if (values.length === 1 && valuesStr.startsWith(\"!\")) {\n      acc.push({\n        name,\n        comparator,\n        isNull: valuesStr === \"!true\",\n      });\n      // Is\n    } else {\n      acc.push({\n        name,\n        comparator,\n        is: toNumberIfPossible(valuesStr),\n      });\n    }\n\n    return acc;\n  }, [] as SearchQueryField[]);\n}\n","import { TSchema } from \"./typebox\";\n\nexport interface ResourceOptions<\n  TResp extends TSchema,\n  TParams extends TSchema,\n> {\n  name: string;\n  resource: string;\n  schema: TResp;\n  params: TParams;\n}\n\nexport class Resource<TResp extends TSchema, TParams extends TSchema> {\n  name: string;\n  resource: string;\n  schema: TResp;\n  params: TParams;\n\n  constructor(options: ResourceOptions<TResp, TParams>) {\n    this.name = options.name;\n    this.resource = options.resource;\n    this.schema = options.schema;\n    this.params = options.params;\n  }\n}\n\nexport function createResource<TResp extends TSchema, TParams extends TSchema>(\n  options: ResourceOptions<TResp, TParams>\n): Resource<TResp, TParams> {\n  return new Resource(options);\n}\n"],"mappings":"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","names":["value","ErrorType"]}